// REFERENCE: System.Drawing.dll

using System.Drawing;
using System.Math;
using System;


def RgbToBitmap(a, w, h)
{
	def bmp = Bitmap(w, h);
	mutable i = 0;
	foreach (y in [0 .. h-1])
	foreach (x in [0 .. w-1])
	{
		def (r, g, b) = a[i];
		bmp.SetPixel
			( x     = x
			, y     = y
			, color = Color.FromArgb
				( Max(0x00, Min(0xFF, r :> int)) & 0xF8
				, Max(0x00, Min(0xFF, g :> int)) & 0xFC
				, Max(0x00, Min(0xFF, b :> int)) & 0xF8
				)
			);
		++i;
	}
	bmp;
}

def BitmapToRgb(bmp)
{

	def data = array(bmp.Width * bmp.Height);
	mutable i = 0;
	foreach (y in [0 .. bmp.Height - 1])
	foreach (x in [0 .. bmp.Width  - 1])
	{
		def color = bmp.GetPixel(x, y);
		data[i] =
			( color.R : double
			, color.G : double
			, color.B : double
			);
		++i;
	}
	(data, bmp.Width, bmp.Height);

}

def GetCandidates(candidates, r, g, b)
{
	def r = r :> int;
	def g = g :> int;
	def b = b :> int;
	candidates[0] = ((r + 0x0 & 0xFFF8) :> double, (g + 0x0 & 0xFFFC) :> double, (b + 0x0 & 0xFFF8) :> double);
	candidates[1] = ((r + 0x0 & 0xFFF8) :> double, (g + 0x0 & 0xFFFC) :> double, (b + 0x8 & 0xFFF8) :> double);
	candidates[2] = ((r + 0x0 & 0xFFF8) :> double, (g + 0x4 & 0xFFFC) :> double, (b + 0x0 & 0xFFF8) :> double);
	candidates[3] = ((r + 0x0 & 0xFFF8) :> double, (g + 0x4 & 0xFFFC) :> double, (b + 0x8 & 0xFFF8) :> double);
	candidates[4] = ((r + 0x8 & 0xFFF8) :> double, (g + 0x0 & 0xFFFC) :> double, (b + 0x0 & 0xFFF8) :> double);
	candidates[5] = ((r + 0x8 & 0xFFF8) :> double, (g + 0x0 & 0xFFFC) :> double, (b + 0x8 & 0xFFF8) :> double);
	candidates[6] = ((r + 0x8 & 0xFFF8) :> double, (g + 0x4 & 0xFFFC) :> double, (b + 0x0 & 0xFFF8) :> double);
	candidates[7] = ((r + 0x8 & 0xFFF8) :> double, (g + 0x4 & 0xFFFC) :> double, (b + 0x8 & 0xFFF8) :> double);
}

// Floydâ€“Steinberg dithering
// for each y from top to bottom
//    for each x from left to right
//       oldpixel := pixel[x][y]
//       newpixel := find_closest_palette_color(oldpixel)
//       pixel[x][y] := newpixel
//       quant_error := oldpixel - newpixel
//       pixel[x+1][y] := pixel[x+1][y] + 7/16 * quant_error
//       pixel[x-1][y+1] := pixel[x-1][y+1] + 3/16 * quant_error
//       pixel[x][y+1] := pixel[x][y+1] + 5/16 * quant_error
//       pixel[x+1][y+1] := pixel[x+1][y+1] + 1/16 * quant_error
def DistributeError(data, w, i, r, g, b)
{
	def AddError(i, dr, dg, db, factor)
	{
		def (r, g, b) = data[i];
		data[i] =
			( r + dr * factor
			, g + dg * factor
			, b + db * factor
			);
	}
	AddError(i + 0 + 1, r, g, b, 7.0 / 16.0);
	AddError(i + w - 1, r, g, b, 3.0 / 16.0);
	AddError(i + w + 0, r, g, b, 5.0 / 16.0);
	AddError(i + w + 1, r, g, b, 1.0 / 16.0);
}

def Dither(data, w, h)
{
	def input      = array(data.Length);
	def output     = array(data.Length);
	def candidates = array(8);
	def FindClosestColor(r1, g1, b1)
	{
		GetCandidates(candidates, r1, g1, b1);
		mutable minR, minG, minB;
		mutable min = double.MaxValue;
		foreach ((r2, g2, b2) in candidates)
		{
			def dr = r1 - r2;
			def dg = g1 - g2;
			def db = b1 - b2;
			def d = dr * dr + dg * dg + db * db;
			when (d < min)
			{
				min  = d;
				minR = r2;
				minG = g2;
				minB = b2;
			}
		}
		(minR, minG, minB);
	}
	Array.Copy(data, input,  data.Length);
	mutable i = 0;
	repeat (h - 2)
	{
		repeat (w - 2)
		{
			def (oldR, oldG, oldB) = input[i];
			def (r, g, b) = FindClosestColor(oldR, oldG, oldB);
			output[i] = (r, g, b);
			def dr = oldR - r;
			def dg = oldG - g;
			def db = oldB - b;
			DistributeError(input, w, i, dr, dg, db);
			++i;
		}
		output[i] = input[i]; ++i;
		output[i] = input[i]; ++i;
	}
	Array.Copy(data, i, input, i, 2 * w);
	(output, w, h);
}

def args = Environment.GetCommandLineArgs();
RgbToBitmap(Dither(BitmapToRgb(Bitmap(args[1])))).Save(args[2]);
