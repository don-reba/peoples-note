#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Types.h>
#include <Evernote/EDAM/Error.h>

namespace Evernote
{
namespace EDAM
{
namespace UserStore
{
class UserStore
{
public:
	class Iface
	{
	public:
		virtual bool checkVersion(Thrift::Protocol::TString clientName, __int16 edamVersionMajor, __int16 edamVersionMinor) = 0;
		virtual AuthenticationResult authenticate(Thrift::Protocol::TString username, Thrift::Protocol::TString password, Thrift::Protocol::TString consumerKey, Thrift::Protocol::TString consumerSecret) = 0;
		virtual AuthenticationResult refreshAuthentication(Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Types::User getUser(Thrift::Protocol::TString authenticationToken) = 0;
		virtual PublicUserInfo getPublicUserInfo(Thrift::Protocol::TString username) = 0;
	};

	class Client : public Iface
	{
	public:

		Client(Thrift::Protocol::TProtocol & prot) : iprot_(prot), oprot_(prot) { seqid_ = 0; }

		Client(Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot) : iprot_(iprot), oprot_(oprot) { seqid_ = 0; }

	private:

		Thrift::Protocol::TProtocol & iprot_;
		Thrift::Protocol::TProtocol & oprot_;
		int seqid_;

	public:

		Thrift::Protocol::TProtocol & GetInputProtocol() { return iprot_; }
		Thrift::Protocol::TProtocol & GetOutputProtocol() { return oprot_; }

	public:

		bool checkVersion(Thrift::Protocol::TString clientName, __int16 edamVersionMajor, __int16 edamVersionMinor);
		void send_checkVersion(Thrift::Protocol::TString clientName, __int16 edamVersionMajor, __int16 edamVersionMinor);
		bool recv_checkVersion();
		AuthenticationResult authenticate(Thrift::Protocol::TString username, Thrift::Protocol::TString password, Thrift::Protocol::TString consumerKey, Thrift::Protocol::TString consumerSecret);
		void send_authenticate(Thrift::Protocol::TString username, Thrift::Protocol::TString password, Thrift::Protocol::TString consumerKey, Thrift::Protocol::TString consumerSecret);
		AuthenticationResult recv_authenticate();
		AuthenticationResult refreshAuthentication(Thrift::Protocol::TString authenticationToken);
		void send_refreshAuthentication(Thrift::Protocol::TString authenticationToken);
		AuthenticationResult recv_refreshAuthentication();
		Evernote::EDAM::Types::User getUser(Thrift::Protocol::TString authenticationToken);
		void send_getUser(Thrift::Protocol::TString authenticationToken);
		Evernote::EDAM::Types::User recv_getUser();
		PublicUserInfo getPublicUserInfo(Thrift::Protocol::TString username);
		void send_getPublicUserInfo(Thrift::Protocol::TString username);
		PublicUserInfo recv_getPublicUserInfo();
	};

	class Processor : public Thrift::TProcessor
	{
	public:

		Processor(Iface & iface);	private:

		typedef void (Evernote::EDAM::UserStore::UserStore::Processor::*ProcessFunction)(int, Thrift::Protocol::TProtocol &, Thrift::Protocol::TProtocol &);
		typedef std::map<std::wstring, ProcessFunction> ProcessMap;
		ProcessMap processMap_;
		Iface & iface_;

	public:

		bool Process(Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void checkVersion_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void authenticate_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void refreshAuthentication_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getUser_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getPublicUserInfo_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
	};


	class checkVersion_args	
	{
	public:

		struct Isset
		{
			bool clientName;
			bool edamVersionMajor;
			bool edamVersionMinor;
		};

		Thrift::Protocol::TString clientName;
		__int16 edamVersionMajor;
		__int16 edamVersionMinor;

		Isset __isset;

		checkVersion_args();
		virtual ~checkVersion_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class checkVersion_result	
	{
	public:

		struct Isset
		{
			bool success;
		};

		bool success;

		Isset __isset;

		checkVersion_result();
		virtual ~checkVersion_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticate_args	
	{
	public:

		struct Isset
		{
			bool username;
			bool password;
			bool consumerKey;
			bool consumerSecret;
		};

		Thrift::Protocol::TString username;
		Thrift::Protocol::TString password;
		Thrift::Protocol::TString consumerKey;
		Thrift::Protocol::TString consumerSecret;

		Isset __isset;

		authenticate_args();
		virtual ~authenticate_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticate_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		AuthenticationResult success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		authenticate_result();
		virtual ~authenticate_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class refreshAuthentication_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		refreshAuthentication_args();
		virtual ~refreshAuthentication_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class refreshAuthentication_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		AuthenticationResult success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		refreshAuthentication_result();
		virtual ~refreshAuthentication_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getUser_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		getUser_args();
		virtual ~getUser_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getUser_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		Evernote::EDAM::Types::User success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getUser_result();
		virtual ~getUser_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getPublicUserInfo_args	
	{
	public:

		struct Isset
		{
			bool username;
		};

		Thrift::Protocol::TString username;

		Isset __isset;

		getPublicUserInfo_args();
		virtual ~getPublicUserInfo_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getPublicUserInfo_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool notFoundException;
			bool systemException;
			bool userException;
		};

		PublicUserInfo success;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMUserException userException;

		Isset __isset;

		getPublicUserInfo_result();
		virtual ~getPublicUserInfo_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};
};
} // UserStore
} // EDAM
} // Evernote
