#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>

namespace Evernote
{
namespace EDAM
{
namespace Limits
{
class Constants
{
public:
	Constants();

	__int32 EDAM_ATTRIBUTE_LEN_MIN;
	__int32 EDAM_ATTRIBUTE_LEN_MAX;
	Thrift::Protocol::TString EDAM_ATTRIBUTE_REGEX;
	__int32 EDAM_ATTRIBUTE_LIST_MAX;
	__int32 EDAM_GUID_LEN_MIN;
	__int32 EDAM_GUID_LEN_MAX;
	Thrift::Protocol::TString EDAM_GUID_REGEX;
	__int32 EDAM_EMAIL_LEN_MIN;
	__int32 EDAM_EMAIL_LEN_MAX;
	Thrift::Protocol::TString EDAM_EMAIL_LOCAL_REGEX;
	Thrift::Protocol::TString EDAM_EMAIL_DOMAIN_REGEX;
	Thrift::Protocol::TString EDAM_EMAIL_REGEX;
	__int32 EDAM_TIMEZONE_LEN_MIN;
	__int32 EDAM_TIMEZONE_LEN_MAX;
	Thrift::Protocol::TString EDAM_TIMEZONE_REGEX;
	__int32 EDAM_MIME_LEN_MIN;
	__int32 EDAM_MIME_LEN_MAX;
	Thrift::Protocol::TString EDAM_MIME_REGEX;
	Thrift::Protocol::TString EDAM_MIME_TYPE_GIF;
	Thrift::Protocol::TString EDAM_MIME_TYPE_JPEG;
	Thrift::Protocol::TString EDAM_MIME_TYPE_PNG;
	Thrift::Protocol::TString EDAM_MIME_TYPE_WAV;
	Thrift::Protocol::TString EDAM_MIME_TYPE_MP3;
	Thrift::Protocol::TString EDAM_MIME_TYPE_AMR;
	Thrift::Protocol::TString EDAM_MIME_TYPE_INK;
	Thrift::Protocol::TString EDAM_MIME_TYPE_PDF;
	Thrift::Protocol::TString EDAM_MIME_TYPE_DEFAULT;
	std::set<Thrift::Protocol::TString > EDAM_MIME_TYPES;
	Thrift::Protocol::TString EDAM_COMMERCE_SERVICE_GOOGLE;
	Thrift::Protocol::TString EDAM_COMMERCE_SERVICE_PAYPAL;
	Thrift::Protocol::TString EDAM_COMMERCE_SERVICE_GIFT;
	Thrift::Protocol::TString EDAM_COMMERCE_SERVICE_TRIALPAY;
	__int32 EDAM_SEARCH_QUERY_LEN_MIN;
	__int32 EDAM_SEARCH_QUERY_LEN_MAX;
	Thrift::Protocol::TString EDAM_SEARCH_QUERY_REGEX;
	__int32 EDAM_HASH_LEN;
	__int32 EDAM_USER_USERNAME_LEN_MIN;
	__int32 EDAM_USER_USERNAME_LEN_MAX;
	Thrift::Protocol::TString EDAM_USER_USERNAME_REGEX;
	__int32 EDAM_USER_NAME_LEN_MIN;
	__int32 EDAM_USER_NAME_LEN_MAX;
	Thrift::Protocol::TString EDAM_USER_NAME_REGEX;
	__int32 EDAM_TAG_NAME_LEN_MIN;
	__int32 EDAM_TAG_NAME_LEN_MAX;
	Thrift::Protocol::TString EDAM_TAG_NAME_REGEX;
	__int32 EDAM_NOTE_TITLE_LEN_MIN;
	__int32 EDAM_NOTE_TITLE_LEN_MAX;
	Thrift::Protocol::TString EDAM_NOTE_TITLE_REGEX;
	__int32 EDAM_NOTE_CONTENT_LEN_MIN;
	__int32 EDAM_NOTE_CONTENT_LEN_MAX;
	__int32 EDAM_NOTEBOOK_NAME_LEN_MIN;
	__int32 EDAM_NOTEBOOK_NAME_LEN_MAX;
	Thrift::Protocol::TString EDAM_NOTEBOOK_NAME_REGEX;
	__int32 EDAM_PUBLISHING_URI_LEN_MIN;
	__int32 EDAM_PUBLISHING_URI_LEN_MAX;
	Thrift::Protocol::TString EDAM_PUBLISHING_URI_REGEX;
	std::set<Thrift::Protocol::TString > EDAM_PUBLISHING_URI_PROHIBITED;
	__int32 EDAM_PUBLISHING_DESCRIPTION_LEN_MIN;
	__int32 EDAM_PUBLISHING_DESCRIPTION_LEN_MAX;
	Thrift::Protocol::TString EDAM_PUBLISHING_DESCRIPTION_REGEX;
	__int32 EDAM_SAVED_SEARCH_NAME_LEN_MIN;
	__int32 EDAM_SAVED_SEARCH_NAME_LEN_MAX;
	Thrift::Protocol::TString EDAM_SAVED_SEARCH_NAME_REGEX;
	__int32 EDAM_USER_PASSWORD_LEN_MIN;
	__int32 EDAM_USER_PASSWORD_LEN_MAX;
	Thrift::Protocol::TString EDAM_USER_PASSWORD_REGEX;
	__int32 EDAM_NOTE_TAGS_MAX;
	__int32 EDAM_NOTE_RESOURCES_MAX;
	__int32 EDAM_USER_TAGS_MAX;
	__int32 EDAM_USER_SAVED_SEARCHES_MAX;
	__int32 EDAM_USER_NOTES_MAX;
	__int32 EDAM_USER_NOTEBOOKS_MAX;
	__int32 EDAM_USER_RECENT_MAILED_ADDRESSES_MAX;
	__int32 EDAM_USER_MAIL_LIMIT_DAILY_FREE;
	__int32 EDAM_USER_MAIL_LIMIT_DAILY_PREMIUM;
	__int32 EDAM_NOTE_SIZE_MAX_FREE;
	__int32 EDAM_NOTE_SIZE_MAX_PREMIUM;
	__int32 EDAM_RESOURCE_SIZE_MAX_FREE;
	__int32 EDAM_RESOURCE_SIZE_MAX_PREMIUM;
	__int32 EDAM_USER_LINKED_NOTEBOOK_MAX;
	__int32 EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX;
};
const Constants constants;
} // Limits
} // EDAM
} // Evernote
