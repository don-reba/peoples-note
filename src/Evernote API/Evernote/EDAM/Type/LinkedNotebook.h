#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class LinkedNotebook
{
public:

	struct Isset
	{
		bool shareName;
		bool username;
		bool shardId;
		bool shareKey;
		bool uri;
		bool guid;
		bool updateSequenceNum;
	};

	Thrift::Protocol::TString shareName;
	Thrift::Protocol::TString username;
	Thrift::Protocol::TString shardId;
	Thrift::Protocol::TString shareKey;
	Thrift::Protocol::TString uri;
	Guid guid;
	__int32 updateSequenceNum;

	Isset __isset;

	LinkedNotebook();
	virtual ~LinkedNotebook() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
