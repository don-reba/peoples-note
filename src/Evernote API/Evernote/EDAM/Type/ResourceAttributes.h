#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class ResourceAttributes
{
public:

	struct Isset
	{
		bool sourceURL;
		bool timestamp;
		bool latitude;
		bool longitude;
		bool altitude;
		bool cameraMake;
		bool cameraModel;
		bool clientWillIndex;
		bool recoType;
		bool fileName;
		bool attachment;
	};

	Thrift::Protocol::TString sourceURL;
	Timestamp timestamp;
	double latitude;
	double longitude;
	double altitude;
	Thrift::Protocol::TString cameraMake;
	Thrift::Protocol::TString cameraModel;
	bool clientWillIndex;
	Thrift::Protocol::TString recoType;
	Thrift::Protocol::TString fileName;
	bool attachment;

	Isset __isset;

	ResourceAttributes();
	virtual ~ResourceAttributes() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
