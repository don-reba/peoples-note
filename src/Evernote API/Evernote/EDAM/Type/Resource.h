#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class Resource
{
public:

	struct Isset
	{
		bool guid;
		bool noteGuid;
		bool data;
		bool mime;
		bool width;
		bool height;
		bool duration;
		bool active;
		bool recognition;
		bool attributes;
		bool updateSequenceNum;
		bool alternateData;
	};

	Guid guid;
	Guid noteGuid;
	Data data;
	Thrift::Protocol::TString mime;
	__int16 width;
	__int16 height;
	__int16 duration;
	bool active;
	Data recognition;
	ResourceAttributes attributes;
	__int32 updateSequenceNum;
	Data alternateData;

	Isset __isset;

	Resource();
	virtual ~Resource() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
