#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class Ad
{
public:

	struct Isset
	{
		bool id;
		bool width;
		bool height;
		bool advertiserName;
		bool imageUrl;
		bool destinationUrl;
		bool displaySeconds;
		bool score;
		bool image;
		bool imageMime;
		bool html;
		bool displayFrequency;
		bool openInTrunk;
	};

	__int32 id;
	__int16 width;
	__int16 height;
	Thrift::Protocol::TString advertiserName;
	Thrift::Protocol::TString imageUrl;
	Thrift::Protocol::TString destinationUrl;
	__int16 displaySeconds;
	double score;
	Thrift::Protocol::TBinary image;
	Thrift::Protocol::TString imageMime;
	Thrift::Protocol::TString html;
	double displayFrequency;
	bool openInTrunk;

	Isset __isset;

	Ad();
	virtual ~Ad() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
