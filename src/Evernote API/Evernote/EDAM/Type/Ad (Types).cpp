/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Type.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Type;

Ad::Ad()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void Ad::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->id = iprot.ReadI32();
				this->__isset.id = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->width = iprot.ReadI16();
				this->__isset.width = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->height = iprot.ReadI16();
				this->__isset.height = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->advertiserName);
				this->__isset.advertiserName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->imageUrl);
				this->__isset.imageUrl = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->destinationUrl);
				this->__isset.destinationUrl = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->displaySeconds = iprot.ReadI16();
				this->__isset.displaySeconds = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->score = iprot.ReadDouble();
				this->__isset.score = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadBinary(this->image);
				this->__isset.image = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->imageMime);
				this->__isset.imageMime = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->html);
				this->__isset.html = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->displayFrequency = iprot.ReadDouble();
				this->__isset.displayFrequency = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->openInTrunk = iprot.ReadBool();
				this->__isset.openInTrunk = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void Ad::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"Ad");
	oprot.WriteStructBegin(struc);
	if (__isset.id)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"id");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->id);
		oprot.WriteFieldEnd();
	}
	if (__isset.width)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"width");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->width);
		oprot.WriteFieldEnd();
	}
	if (__isset.height)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"height");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->height);
		oprot.WriteFieldEnd();
	}
	if (__isset.advertiserName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"advertiserName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->advertiserName);
		oprot.WriteFieldEnd();
	}
	if (__isset.imageUrl)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"imageUrl");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->imageUrl);
		oprot.WriteFieldEnd();
	}
	if (__isset.destinationUrl)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"destinationUrl");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->destinationUrl);
		oprot.WriteFieldEnd();
	}
	if (__isset.displaySeconds)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"displaySeconds");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->displaySeconds);
		oprot.WriteFieldEnd();
	}
	if (__isset.score)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"score");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->score);
		oprot.WriteFieldEnd();
	}
	if (__isset.image)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"image");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		oprot.WriteBinary(this->image);
		oprot.WriteFieldEnd();
	}
	if (__isset.imageMime)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"imageMime");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->imageMime);
		oprot.WriteFieldEnd();
	}
	if (__isset.html)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"html");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->html);
		oprot.WriteFieldEnd();
	}
	if (__isset.displayFrequency)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"displayFrequency");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->displayFrequency);
		oprot.WriteFieldEnd();
	}
	if (__isset.openInTrunk)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"openInTrunk");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->openInTrunk);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

