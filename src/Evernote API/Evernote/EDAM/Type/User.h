#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class User
{
public:

	struct Isset
	{
		bool id;
		bool username;
		bool email;
		bool name;
		bool timezone;
		bool privilege;
		bool created;
		bool updated;
		bool deleted;
		bool active;
		bool shardId;
		bool attributes;
		bool accounting;
	};

	UserID id;
	Thrift::Protocol::TString username;
	Thrift::Protocol::TString email;
	Thrift::Protocol::TString name;
	Thrift::Protocol::TString timezone;
	PrivilegeLevel privilege;
	Timestamp created;
	Timestamp updated;
	Timestamp deleted;
	bool active;
	Thrift::Protocol::TString shardId;
	UserAttributes attributes;
	Accounting accounting;

	Isset __isset;

	User();
	virtual ~User() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
