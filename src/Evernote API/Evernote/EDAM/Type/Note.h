#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace Type
{

class Note
{
public:

	struct Isset
	{
		bool guid;
		bool title;
		bool content;
		bool contentHash;
		bool contentLength;
		bool created;
		bool updated;
		bool deleted;
		bool active;
		bool updateSequenceNum;
		bool notebookGuid;
		bool tagGuids;
		bool resources;
		bool attributes;
		bool tagNames;
	};

	Guid guid;
	Thrift::Protocol::TString title;
	Thrift::Protocol::TString content;
	Thrift::Protocol::TBinary contentHash;
	__int32 contentLength;
	Timestamp created;
	Timestamp updated;
	Timestamp deleted;
	bool active;
	__int32 updateSequenceNum;
	Thrift::Protocol::TString notebookGuid;
	std::vector<Guid > tagGuids;
	std::vector<Resource > resources;
	NoteAttributes attributes;
	std::vector<Thrift::Protocol::TString > tagNames;

	Isset __isset;

	Note();
	virtual ~Note() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // Type
} // EDAM
} // Evernote
