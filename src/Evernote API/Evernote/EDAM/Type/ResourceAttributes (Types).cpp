/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Type.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Type;

ResourceAttributes::ResourceAttributes()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void ResourceAttributes::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->sourceURL);
				this->__isset.sourceURL = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->timestamp = iprot.ReadI64();
				this->__isset.timestamp = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->latitude = iprot.ReadDouble();
				this->__isset.latitude = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->longitude = iprot.ReadDouble();
				this->__isset.longitude = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->altitude = iprot.ReadDouble();
				this->__isset.altitude = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->cameraMake);
				this->__isset.cameraMake = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->cameraModel);
				this->__isset.cameraModel = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->clientWillIndex = iprot.ReadBool();
				this->__isset.clientWillIndex = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->recoType);
				this->__isset.recoType = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->fileName);
				this->__isset.fileName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->attachment = iprot.ReadBool();
				this->__isset.attachment = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void ResourceAttributes::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"ResourceAttributes");
	oprot.WriteStructBegin(struc);
	if (__isset.sourceURL)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sourceURL");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->sourceURL);
		oprot.WriteFieldEnd();
	}
	if (__isset.timestamp)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"timestamp");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->timestamp);
		oprot.WriteFieldEnd();
	}
	if (__isset.latitude)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"latitude");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->latitude);
		oprot.WriteFieldEnd();
	}
	if (__isset.longitude)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"longitude");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->longitude);
		oprot.WriteFieldEnd();
	}
	if (__isset.altitude)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"altitude");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->altitude);
		oprot.WriteFieldEnd();
	}
	if (__isset.cameraMake)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"cameraMake");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->cameraMake);
		oprot.WriteFieldEnd();
	}
	if (__isset.cameraModel)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"cameraModel");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->cameraModel);
		oprot.WriteFieldEnd();
	}
	if (__isset.clientWillIndex)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"clientWillIndex");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->clientWillIndex);
		oprot.WriteFieldEnd();
	}
	if (__isset.recoType)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"recoType");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->recoType);
		oprot.WriteFieldEnd();
	}
	if (__isset.fileName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"fileName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->fileName);
		oprot.WriteFieldEnd();
	}
	if (__isset.attachment)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"attachment");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->attachment);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

