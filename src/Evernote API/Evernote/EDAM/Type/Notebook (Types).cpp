/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Type.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Type;

Notebook::Notebook()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void Notebook::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->name);
				this->__isset.name = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->updateSequenceNum = iprot.ReadI32();
				this->__isset.updateSequenceNum = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->defaultNotebook = iprot.ReadBool();
				this->__isset.defaultNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->serviceCreated = iprot.ReadI64();
				this->__isset.serviceCreated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->serviceUpdated = iprot.ReadI64();
				this->__isset.serviceUpdated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->publishing.Read(iprot);
				this->__isset.publishing = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->published = iprot.ReadBool();
				this->__isset.published = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->stack);
				this->__isset.stack = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list20;
					iprot.ReadListBegin(_list20);
					for (int _i21 = 0; _i21 < _list20.GetCount(); ++_i21)
					{
						__int64 _elem22 = 0;
						_elem22 = iprot.ReadI64();
						this->sharedNotebookIds.push_back(_elem22);
					}
					iprot.ReadListEnd();
				}
				this->__isset.sharedNotebookIds = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void Notebook::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"Notebook");
	oprot.WriteStructBegin(struc);
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.name)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"name");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->name);
		oprot.WriteFieldEnd();
	}
	if (__isset.updateSequenceNum)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updateSequenceNum");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->updateSequenceNum);
		oprot.WriteFieldEnd();
	}
	if (__isset.defaultNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"defaultNotebook");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->defaultNotebook);
		oprot.WriteFieldEnd();
	}
	if (__isset.serviceCreated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"serviceCreated");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->serviceCreated);
		oprot.WriteFieldEnd();
	}
	if (__isset.serviceUpdated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"serviceUpdated");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->serviceUpdated);
		oprot.WriteFieldEnd();
	}
	if (__isset.publishing)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"publishing");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		this->publishing.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.published)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"published");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->published);
		oprot.WriteFieldEnd();
	}
	if (__isset.stack)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"stack");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->stack);
		oprot.WriteFieldEnd();
	}
	if (__isset.sharedNotebookIds)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sharedNotebookIds");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeI64);
			list.SetCount(this->sharedNotebookIds.size());
			oprot.WriteListBegin(list);
			for (std::vector<__int64 >::iterator _iter23(this->sharedNotebookIds.begin()), end(this->sharedNotebookIds.end()); _iter23 != end; ++_iter23)
			{
				oprot.WriteI64((*_iter23));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

