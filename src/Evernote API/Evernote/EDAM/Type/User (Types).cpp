/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Type.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Type;

User::User()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void User::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->id = iprot.ReadI32();
				this->__isset.id = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->username);
				this->__isset.username = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->email);
				this->__isset.email = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->name);
				this->__isset.name = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->timezone);
				this->__isset.timezone = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->privilege = (const PrivilegeLevel)iprot.ReadI32();
				this->__isset.privilege = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->created = iprot.ReadI64();
				this->__isset.created = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->updated = iprot.ReadI64();
				this->__isset.updated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->deleted = iprot.ReadI64();
				this->__isset.deleted = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->active = iprot.ReadBool();
				this->__isset.active = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 14:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->shardId);
				this->__isset.shardId = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 15:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->attributes.Read(iprot);
				this->__isset.attributes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 16:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->accounting.Read(iprot);
				this->__isset.accounting = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void User::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"User");
	oprot.WriteStructBegin(struc);
	if (__isset.id)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"id");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->id);
		oprot.WriteFieldEnd();
	}
	if (__isset.username)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"username");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->username);
		oprot.WriteFieldEnd();
	}
	if (__isset.email)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"email");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->email);
		oprot.WriteFieldEnd();
	}
	if (__isset.name)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"name");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->name);
		oprot.WriteFieldEnd();
	}
	if (__isset.timezone)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"timezone");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->timezone);
		oprot.WriteFieldEnd();
	}
	if (__isset.privilege)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"privilege");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32((int)this->privilege);
		oprot.WriteFieldEnd();
	}
	if (__isset.created)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"created");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->created);
		oprot.WriteFieldEnd();
	}
	if (__isset.updated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updated");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->updated);
		oprot.WriteFieldEnd();
	}
	if (__isset.deleted)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"deleted");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->deleted);
		oprot.WriteFieldEnd();
	}
	if (__isset.active)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"active");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->active);
		oprot.WriteFieldEnd();
	}
	if (__isset.shardId)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"shardId");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(14);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->shardId);
		oprot.WriteFieldEnd();
	}
	if (__isset.attributes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"attributes");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(15);
		oprot.WriteFieldBegin(field);
		this->attributes.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.accounting)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"accounting");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(16);
		oprot.WriteFieldBegin(field);
		this->accounting.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

