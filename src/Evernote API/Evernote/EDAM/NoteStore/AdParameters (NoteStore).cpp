/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Types.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

AdParameters::AdParameters()
{
	memset(&__isset, 0, sizeof(Isset));
}

void AdParameters::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->clientLanguage;
				iprot.ReadString(this->clientLanguage);
				this->__isset.clientLanguage = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list62;
					iprot.ReadListBegin(_list62);
					for (int _i63 = 0; _i63 < _list62.GetCount(); ++_i63)
					{
						AdImpressions _elem64;
						_elem64.Read(iprot);
						this->impressions.push_back(_elem64);
					}
					iprot.ReadListEnd();
				}
				this->__isset.impressions = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->supportHtml = iprot.ReadBool();
				this->__isset.supportHtml = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeMap)
			{
				{
					Thrift::Protocol::TMap _map65;
					iprot.ReadMapBegin(_map65);
					for (int _i66 = 0; _i66 < _map65.GetCount(); ++_i66)
					{
						Thrift::Protocol::TString _key67;
						Thrift::Protocol::TString _val68;
						_key67;
						iprot.ReadString(_key67);
						_val68;
						iprot.ReadString(_val68);
						this->clientProperties[_key67] = _val68;
					}
					iprot.ReadMapEnd();
				}
				this->__isset.clientProperties = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void AdParameters::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"AdParameters");
	oprot.WriteStructBegin(struc);
	if (__isset.clientLanguage)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"clientLanguage");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->clientLanguage);
		oprot.WriteFieldEnd();
	}
	if (__isset.impressions)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"impressions");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->impressions.size());
			oprot.WriteListBegin(list);
			for (std::vector<AdImpressions >::iterator _iter69(this->impressions.begin()), end(this->impressions.end()); _iter69 != end; ++_iter69)
			{
				(*_iter69).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.supportHtml)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"supportHtml");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->supportHtml);
		oprot.WriteFieldEnd();
	}
	if (__isset.clientProperties)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"clientProperties");
		field.SetType(Thrift::Protocol::TypeMap);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TMap map;
			map.SetKeyType(Thrift::Protocol::TypeString);
			map.SetValueType(Thrift::Protocol::TypeString);
			map.SetCount(this->clientProperties.size());
			oprot.WriteMapBegin(map);
			for (std::map<Thrift::Protocol::TString, Thrift::Protocol::TString >::iterator _iter70(this->clientProperties.begin()), end(this->clientProperties.end()); _iter70 != end; ++_iter70)
			{
				oprot.WriteString(_iter70->first);
				oprot.WriteString(_iter70->second);
				oprot.WriteMapEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

