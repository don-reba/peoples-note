#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

namespace Evernote
{
namespace EDAM
{
namespace NoteStore
{
class NoteStore
{
public:
	class Iface
	{
	public:
		virtual SyncState getSyncState(Thrift::Protocol::TString authenticationToken) = 0;
		virtual SyncChunk getSyncChunk(Thrift::Protocol::TString authenticationToken, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly) = 0;
		virtual SyncState getLinkedNotebookSyncState(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook) = 0;
		virtual SyncChunk getLinkedNotebookSyncChunk(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly) = 0;
		virtual std::vector<Evernote::EDAM::Type::Notebook > listNotebooks(Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Type::Notebook getNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::Notebook getDefaultNotebook(Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Type::Notebook createNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook) = 0;
		virtual __int32 updateNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook) = 0;
		virtual __int32 expungeNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual std::vector<Evernote::EDAM::Type::Tag > listTags(Thrift::Protocol::TString authenticationToken) = 0;
		virtual std::vector<Evernote::EDAM::Type::Tag > listTagsByNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid notebookGuid) = 0;
		virtual Evernote::EDAM::Type::Tag getTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::Tag createTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag) = 0;
		virtual __int32 updateTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag) = 0;
		virtual void untagAll(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual __int32 expungeTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual std::vector<Evernote::EDAM::Type::SavedSearch > listSearches(Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Type::SavedSearch getSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::SavedSearch createSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search) = 0;
		virtual __int32 updateSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search) = 0;
		virtual __int32 expungeSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual NoteList findNotes(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes) = 0;
		virtual __int32 findNoteOffset(Thrift::Protocol::TString authenticationToken, NoteFilter filter, Evernote::EDAM::Type::Guid guid) = 0;
		virtual NotesMetadataList findNotesMetadata(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes, NotesMetadataResultSpec resultSpec) = 0;
		virtual NoteCollectionCounts findNoteCounts(Thrift::Protocol::TString authenticationToken, NoteFilter filter, bool withTrash) = 0;
		virtual Evernote::EDAM::Type::Note getNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData) = 0;
		virtual Thrift::Protocol::TString getNoteContent(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Thrift::Protocol::TString getNoteSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool noteOnly, bool tokenizeForIndexing) = 0;
		virtual Thrift::Protocol::TString getResourceSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual std::vector<Thrift::Protocol::TString > getNoteTagNames(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::Note createNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note) = 0;
		virtual Evernote::EDAM::Type::Note updateNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note) = 0;
		virtual __int32 deleteNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual __int32 expungeNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual __int32 expungeNotes(Thrift::Protocol::TString authenticationToken, std::vector<Evernote::EDAM::Type::Guid > noteGuids) = 0;
		virtual __int32 expungeInactiveNotes(Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Type::Note copyNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Evernote::EDAM::Type::Guid toNotebookGuid) = 0;
		virtual std::vector<NoteVersionId > listNoteVersions(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid) = 0;
		virtual Evernote::EDAM::Type::Note getNoteVersion(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, __int32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData) = 0;
		virtual Evernote::EDAM::Type::Resource getResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData) = 0;
		virtual __int32 updateResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Resource resource) = 0;
		virtual Thrift::Protocol::TBinary getResourceData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::Resource getResourceByHash(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Thrift::Protocol::TBinary contentHash, bool withData, bool withRecognition, bool withAlternateData) = 0;
		virtual Thrift::Protocol::TBinary getResourceRecognition(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Thrift::Protocol::TBinary getResourceAlternateData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::Type::ResourceAttributes getResourceAttributes(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual __int64 getAccountSize(Thrift::Protocol::TString authenticationToken) = 0;
		virtual std::vector<Evernote::EDAM::Type::Ad > getAds(Thrift::Protocol::TString authenticationToken, AdParameters adParameters) = 0;
		virtual Evernote::EDAM::Type::Ad getRandomAd(Thrift::Protocol::TString authenticationToken, AdParameters adParameters) = 0;
		virtual Evernote::EDAM::Type::Notebook getPublicNotebook(Evernote::EDAM::Type::UserID userId, Thrift::Protocol::TString publicUri) = 0;
		virtual Evernote::EDAM::Type::SharedNotebook createSharedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SharedNotebook sharedNotebook) = 0;
		virtual std::vector<Evernote::EDAM::Type::SharedNotebook > listSharedNotebooks(Thrift::Protocol::TString authenticationToken) = 0;
		virtual __int32 expungeSharedNotebooks(Thrift::Protocol::TString authenticationToken, std::vector<__int64 > sharedNotebookIds) = 0;
		virtual Evernote::EDAM::Type::LinkedNotebook createLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook) = 0;
		virtual __int32 updateLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook) = 0;
		virtual std::vector<Evernote::EDAM::Type::LinkedNotebook > listLinkedNotebooks(Thrift::Protocol::TString authenticationToken) = 0;
		virtual __int32 expungeLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::UserStore::AuthenticationResult authenticateToSharedNotebook(Thrift::Protocol::TString shareKey, Thrift::Protocol::TString authenticationToken) = 0;
		virtual Evernote::EDAM::Type::SharedNotebook getSharedNotebookByAuth(Thrift::Protocol::TString authenticationToken) = 0;
		virtual void emailNote(Thrift::Protocol::TString authenticationToken, NoteEmailParameters parameters) = 0;
		virtual Thrift::Protocol::TString shareNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual void stopSharingNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid) = 0;
		virtual Evernote::EDAM::UserStore::AuthenticationResult authenticateToSharedNote(Thrift::Protocol::TString guid, Thrift::Protocol::TString noteKey) = 0;
	};

	class Client : public Iface
	{
	public:

		Client(Thrift::Protocol::TProtocol & prot) : iprot_(prot), oprot_(prot) { seqid_ = 0; }

		Client(Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot) : iprot_(iprot), oprot_(oprot) { seqid_ = 0; }

	private:

		Thrift::Protocol::TProtocol & iprot_;
		Thrift::Protocol::TProtocol & oprot_;
		int seqid_;

	public:

		Thrift::Protocol::TProtocol & GetInputProtocol() { return iprot_; }
		Thrift::Protocol::TProtocol & GetOutputProtocol() { return oprot_; }

	public:

		SyncState getSyncState(Thrift::Protocol::TString authenticationToken);
		void send_getSyncState(Thrift::Protocol::TString authenticationToken);
		SyncState recv_getSyncState();
		SyncChunk getSyncChunk(Thrift::Protocol::TString authenticationToken, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly);
		void send_getSyncChunk(Thrift::Protocol::TString authenticationToken, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly);
		SyncChunk recv_getSyncChunk();
		SyncState getLinkedNotebookSyncState(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		void send_getLinkedNotebookSyncState(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		SyncState recv_getLinkedNotebookSyncState();
		SyncChunk getLinkedNotebookSyncChunk(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly);
		void send_getLinkedNotebookSyncChunk(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly);
		SyncChunk recv_getLinkedNotebookSyncChunk();
		std::vector<Evernote::EDAM::Type::Notebook > listNotebooks(Thrift::Protocol::TString authenticationToken);
		void send_listNotebooks(Thrift::Protocol::TString authenticationToken);
		std::vector<Evernote::EDAM::Type::Notebook > recv_listNotebooks();
		Evernote::EDAM::Type::Notebook getNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Evernote::EDAM::Type::Notebook recv_getNotebook();
		Evernote::EDAM::Type::Notebook getDefaultNotebook(Thrift::Protocol::TString authenticationToken);
		void send_getDefaultNotebook(Thrift::Protocol::TString authenticationToken);
		Evernote::EDAM::Type::Notebook recv_getDefaultNotebook();
		Evernote::EDAM::Type::Notebook createNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook);
		void send_createNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook);
		Evernote::EDAM::Type::Notebook recv_createNotebook();
		__int32 updateNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook);
		void send_updateNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook);
		__int32 recv_updateNotebook();
		__int32 expungeNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_expungeNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_expungeNotebook();
		std::vector<Evernote::EDAM::Type::Tag > listTags(Thrift::Protocol::TString authenticationToken);
		void send_listTags(Thrift::Protocol::TString authenticationToken);
		std::vector<Evernote::EDAM::Type::Tag > recv_listTags();
		std::vector<Evernote::EDAM::Type::Tag > listTagsByNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid notebookGuid);
		void send_listTagsByNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid notebookGuid);
		std::vector<Evernote::EDAM::Type::Tag > recv_listTagsByNotebook();
		Evernote::EDAM::Type::Tag getTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Evernote::EDAM::Type::Tag recv_getTag();
		Evernote::EDAM::Type::Tag createTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag);
		void send_createTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag);
		Evernote::EDAM::Type::Tag recv_createTag();
		__int32 updateTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag);
		void send_updateTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag);
		__int32 recv_updateTag();
		void untagAll(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_untagAll(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void recv_untagAll();
		__int32 expungeTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_expungeTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_expungeTag();
		std::vector<Evernote::EDAM::Type::SavedSearch > listSearches(Thrift::Protocol::TString authenticationToken);
		void send_listSearches(Thrift::Protocol::TString authenticationToken);
		std::vector<Evernote::EDAM::Type::SavedSearch > recv_listSearches();
		Evernote::EDAM::Type::SavedSearch getSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Evernote::EDAM::Type::SavedSearch recv_getSearch();
		Evernote::EDAM::Type::SavedSearch createSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search);
		void send_createSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search);
		Evernote::EDAM::Type::SavedSearch recv_createSearch();
		__int32 updateSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search);
		void send_updateSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search);
		__int32 recv_updateSearch();
		__int32 expungeSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_expungeSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_expungeSearch();
		NoteList findNotes(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes);
		void send_findNotes(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes);
		NoteList recv_findNotes();
		__int32 findNoteOffset(Thrift::Protocol::TString authenticationToken, NoteFilter filter, Evernote::EDAM::Type::Guid guid);
		void send_findNoteOffset(Thrift::Protocol::TString authenticationToken, NoteFilter filter, Evernote::EDAM::Type::Guid guid);
		__int32 recv_findNoteOffset();
		NotesMetadataList findNotesMetadata(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes, NotesMetadataResultSpec resultSpec);
		void send_findNotesMetadata(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes, NotesMetadataResultSpec resultSpec);
		NotesMetadataList recv_findNotesMetadata();
		NoteCollectionCounts findNoteCounts(Thrift::Protocol::TString authenticationToken, NoteFilter filter, bool withTrash);
		void send_findNoteCounts(Thrift::Protocol::TString authenticationToken, NoteFilter filter, bool withTrash);
		NoteCollectionCounts recv_findNoteCounts();
		Evernote::EDAM::Type::Note getNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData);
		void send_getNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData);
		Evernote::EDAM::Type::Note recv_getNote();
		Thrift::Protocol::TString getNoteContent(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getNoteContent(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TString recv_getNoteContent();
		Thrift::Protocol::TString getNoteSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool noteOnly, bool tokenizeForIndexing);
		void send_getNoteSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool noteOnly, bool tokenizeForIndexing);
		Thrift::Protocol::TString recv_getNoteSearchText();
		Thrift::Protocol::TString getResourceSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getResourceSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TString recv_getResourceSearchText();
		std::vector<Thrift::Protocol::TString > getNoteTagNames(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getNoteTagNames(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		std::vector<Thrift::Protocol::TString > recv_getNoteTagNames();
		Evernote::EDAM::Type::Note createNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note);
		void send_createNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note);
		Evernote::EDAM::Type::Note recv_createNote();
		Evernote::EDAM::Type::Note updateNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note);
		void send_updateNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note);
		Evernote::EDAM::Type::Note recv_updateNote();
		__int32 deleteNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_deleteNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_deleteNote();
		__int32 expungeNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_expungeNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_expungeNote();
		__int32 expungeNotes(Thrift::Protocol::TString authenticationToken, std::vector<Evernote::EDAM::Type::Guid > noteGuids);
		void send_expungeNotes(Thrift::Protocol::TString authenticationToken, std::vector<Evernote::EDAM::Type::Guid > noteGuids);
		__int32 recv_expungeNotes();
		__int32 expungeInactiveNotes(Thrift::Protocol::TString authenticationToken);
		void send_expungeInactiveNotes(Thrift::Protocol::TString authenticationToken);
		__int32 recv_expungeInactiveNotes();
		Evernote::EDAM::Type::Note copyNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Evernote::EDAM::Type::Guid toNotebookGuid);
		void send_copyNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Evernote::EDAM::Type::Guid toNotebookGuid);
		Evernote::EDAM::Type::Note recv_copyNote();
		std::vector<NoteVersionId > listNoteVersions(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid);
		void send_listNoteVersions(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid);
		std::vector<NoteVersionId > recv_listNoteVersions();
		Evernote::EDAM::Type::Note getNoteVersion(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, __int32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData);
		void send_getNoteVersion(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, __int32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData);
		Evernote::EDAM::Type::Note recv_getNoteVersion();
		Evernote::EDAM::Type::Resource getResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData);
		void send_getResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData);
		Evernote::EDAM::Type::Resource recv_getResource();
		__int32 updateResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Resource resource);
		void send_updateResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Resource resource);
		__int32 recv_updateResource();
		Thrift::Protocol::TBinary getResourceData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getResourceData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TBinary recv_getResourceData();
		Evernote::EDAM::Type::Resource getResourceByHash(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Thrift::Protocol::TBinary contentHash, bool withData, bool withRecognition, bool withAlternateData);
		void send_getResourceByHash(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Thrift::Protocol::TBinary contentHash, bool withData, bool withRecognition, bool withAlternateData);
		Evernote::EDAM::Type::Resource recv_getResourceByHash();
		Thrift::Protocol::TBinary getResourceRecognition(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getResourceRecognition(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TBinary recv_getResourceRecognition();
		Thrift::Protocol::TBinary getResourceAlternateData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getResourceAlternateData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TBinary recv_getResourceAlternateData();
		Evernote::EDAM::Type::ResourceAttributes getResourceAttributes(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_getResourceAttributes(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Evernote::EDAM::Type::ResourceAttributes recv_getResourceAttributes();
		__int64 getAccountSize(Thrift::Protocol::TString authenticationToken);
		void send_getAccountSize(Thrift::Protocol::TString authenticationToken);
		__int64 recv_getAccountSize();
		std::vector<Evernote::EDAM::Type::Ad > getAds(Thrift::Protocol::TString authenticationToken, AdParameters adParameters);
		void send_getAds(Thrift::Protocol::TString authenticationToken, AdParameters adParameters);
		std::vector<Evernote::EDAM::Type::Ad > recv_getAds();
		Evernote::EDAM::Type::Ad getRandomAd(Thrift::Protocol::TString authenticationToken, AdParameters adParameters);
		void send_getRandomAd(Thrift::Protocol::TString authenticationToken, AdParameters adParameters);
		Evernote::EDAM::Type::Ad recv_getRandomAd();
		Evernote::EDAM::Type::Notebook getPublicNotebook(Evernote::EDAM::Type::UserID userId, Thrift::Protocol::TString publicUri);
		void send_getPublicNotebook(Evernote::EDAM::Type::UserID userId, Thrift::Protocol::TString publicUri);
		Evernote::EDAM::Type::Notebook recv_getPublicNotebook();
		Evernote::EDAM::Type::SharedNotebook createSharedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SharedNotebook sharedNotebook);
		void send_createSharedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SharedNotebook sharedNotebook);
		Evernote::EDAM::Type::SharedNotebook recv_createSharedNotebook();
		std::vector<Evernote::EDAM::Type::SharedNotebook > listSharedNotebooks(Thrift::Protocol::TString authenticationToken);
		void send_listSharedNotebooks(Thrift::Protocol::TString authenticationToken);
		std::vector<Evernote::EDAM::Type::SharedNotebook > recv_listSharedNotebooks();
		__int32 expungeSharedNotebooks(Thrift::Protocol::TString authenticationToken, std::vector<__int64 > sharedNotebookIds);
		void send_expungeSharedNotebooks(Thrift::Protocol::TString authenticationToken, std::vector<__int64 > sharedNotebookIds);
		__int32 recv_expungeSharedNotebooks();
		Evernote::EDAM::Type::LinkedNotebook createLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		void send_createLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		Evernote::EDAM::Type::LinkedNotebook recv_createLinkedNotebook();
		__int32 updateLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		void send_updateLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook);
		__int32 recv_updateLinkedNotebook();
		std::vector<Evernote::EDAM::Type::LinkedNotebook > listLinkedNotebooks(Thrift::Protocol::TString authenticationToken);
		void send_listLinkedNotebooks(Thrift::Protocol::TString authenticationToken);
		std::vector<Evernote::EDAM::Type::LinkedNotebook > recv_listLinkedNotebooks();
		__int32 expungeLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_expungeLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		__int32 recv_expungeLinkedNotebook();
		Evernote::EDAM::UserStore::AuthenticationResult authenticateToSharedNotebook(Thrift::Protocol::TString shareKey, Thrift::Protocol::TString authenticationToken);
		void send_authenticateToSharedNotebook(Thrift::Protocol::TString shareKey, Thrift::Protocol::TString authenticationToken);
		Evernote::EDAM::UserStore::AuthenticationResult recv_authenticateToSharedNotebook();
		Evernote::EDAM::Type::SharedNotebook getSharedNotebookByAuth(Thrift::Protocol::TString authenticationToken);
		void send_getSharedNotebookByAuth(Thrift::Protocol::TString authenticationToken);
		Evernote::EDAM::Type::SharedNotebook recv_getSharedNotebookByAuth();
		void emailNote(Thrift::Protocol::TString authenticationToken, NoteEmailParameters parameters);
		void send_emailNote(Thrift::Protocol::TString authenticationToken, NoteEmailParameters parameters);
		void recv_emailNote();
		Thrift::Protocol::TString shareNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_shareNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		Thrift::Protocol::TString recv_shareNote();
		void stopSharingNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void send_stopSharingNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid);
		void recv_stopSharingNote();
		Evernote::EDAM::UserStore::AuthenticationResult authenticateToSharedNote(Thrift::Protocol::TString guid, Thrift::Protocol::TString noteKey);
		void send_authenticateToSharedNote(Thrift::Protocol::TString guid, Thrift::Protocol::TString noteKey);
		Evernote::EDAM::UserStore::AuthenticationResult recv_authenticateToSharedNote();
	};

	class Processor : public Thrift::TProcessor
	{
	public:

		Processor(Iface & iface);	private:

		typedef void (Evernote::EDAM::NoteStore::NoteStore::Processor::*ProcessFunction)(int, Thrift::Protocol::TProtocol &, Thrift::Protocol::TProtocol &);
		typedef std::map<std::wstring, ProcessFunction> ProcessMap;
		ProcessMap processMap_;
		Iface & iface_;

	public:

		bool Process(Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getSyncState_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getSyncChunk_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getLinkedNotebookSyncState_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getLinkedNotebookSyncChunk_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getDefaultNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listTags_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listTagsByNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void untagAll_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listSearches_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void findNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void findNoteOffset_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void findNotesMetadata_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void findNoteCounts_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNoteContent_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNoteSearchText_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceSearchText_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNoteTagNames_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void deleteNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeInactiveNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void copyNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listNoteVersions_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getNoteVersion_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResource_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateResource_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceData_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceByHash_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceRecognition_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceAlternateData_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getResourceAttributes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getAccountSize_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getAds_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getRandomAd_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getPublicNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createSharedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listSharedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeSharedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void createLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void updateLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void listLinkedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void expungeLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void authenticateToSharedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void getSharedNotebookByAuth_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void emailNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void shareNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void stopSharingNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
		void authenticateToSharedNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot);
	};


	class getSyncState_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		getSyncState_args();
		virtual ~getSyncState_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSyncState_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		SyncState success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getSyncState_result();
		virtual ~getSyncState_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSyncChunk_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool afterUSN;
			bool maxEntries;
			bool fullSyncOnly;
		};

		Thrift::Protocol::TString authenticationToken;
		__int32 afterUSN;
		__int32 maxEntries;
		bool fullSyncOnly;

		Isset __isset;

		getSyncChunk_args();
		virtual ~getSyncChunk_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSyncChunk_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		SyncChunk success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getSyncChunk_result();
		virtual ~getSyncChunk_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getLinkedNotebookSyncState_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool linkedNotebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::LinkedNotebook linkedNotebook;

		Isset __isset;

		getLinkedNotebookSyncState_args();
		virtual ~getLinkedNotebookSyncState_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getLinkedNotebookSyncState_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		SyncState success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getLinkedNotebookSyncState_result();
		virtual ~getLinkedNotebookSyncState_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getLinkedNotebookSyncChunk_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool linkedNotebook;
			bool afterUSN;
			bool maxEntries;
			bool fullSyncOnly;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::LinkedNotebook linkedNotebook;
		__int32 afterUSN;
		__int32 maxEntries;
		bool fullSyncOnly;

		Isset __isset;

		getLinkedNotebookSyncChunk_args();
		virtual ~getLinkedNotebookSyncChunk_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getLinkedNotebookSyncChunk_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		SyncChunk success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getLinkedNotebookSyncChunk_result();
		virtual ~getLinkedNotebookSyncChunk_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listNotebooks_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		listNotebooks_args();
		virtual ~listNotebooks_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listNotebooks_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::Notebook > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		listNotebooks_result();
		virtual ~listNotebooks_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getNotebook_args();
		virtual ~getNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Notebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNotebook_result();
		virtual ~getNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getDefaultNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		getDefaultNotebook_args();
		virtual ~getDefaultNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getDefaultNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		Evernote::EDAM::Type::Notebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getDefaultNotebook_result();
		virtual ~getDefaultNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool notebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Notebook notebook;

		Isset __isset;

		createNotebook_args();
		virtual ~createNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		Evernote::EDAM::Type::Notebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		createNotebook_result();
		virtual ~createNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool notebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Notebook notebook;

		Isset __isset;

		updateNotebook_args();
		virtual ~updateNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		updateNotebook_result();
		virtual ~updateNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		expungeNotebook_args();
		virtual ~expungeNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		expungeNotebook_result();
		virtual ~expungeNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listTags_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		listTags_args();
		virtual ~listTags_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listTags_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::Tag > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		listTags_result();
		virtual ~listTags_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listTagsByNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool notebookGuid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid notebookGuid;

		Isset __isset;

		listTagsByNotebook_args();
		virtual ~listTagsByNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listTagsByNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		std::vector<Evernote::EDAM::Type::Tag > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		listTagsByNotebook_result();
		virtual ~listTagsByNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getTag_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getTag_args();
		virtual ~getTag_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getTag_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Tag success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getTag_result();
		virtual ~getTag_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createTag_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool tag;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Tag tag;

		Isset __isset;

		createTag_args();
		virtual ~createTag_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createTag_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Tag success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		createTag_result();
		virtual ~createTag_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateTag_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool tag;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Tag tag;

		Isset __isset;

		updateTag_args();
		virtual ~updateTag_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateTag_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		updateTag_result();
		virtual ~updateTag_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class untagAll_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		untagAll_args();
		virtual ~untagAll_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class untagAll_result	
	{
	public:

		struct Isset
		{
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		untagAll_result();
		virtual ~untagAll_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeTag_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		expungeTag_args();
		virtual ~expungeTag_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeTag_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		expungeTag_result();
		virtual ~expungeTag_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listSearches_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		listSearches_args();
		virtual ~listSearches_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listSearches_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::SavedSearch > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		listSearches_result();
		virtual ~listSearches_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSearch_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getSearch_args();
		virtual ~getSearch_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSearch_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::SavedSearch success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getSearch_result();
		virtual ~getSearch_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createSearch_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool search;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::SavedSearch search;

		Isset __isset;

		createSearch_args();
		virtual ~createSearch_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createSearch_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		Evernote::EDAM::Type::SavedSearch success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		createSearch_result();
		virtual ~createSearch_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateSearch_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool search;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::SavedSearch search;

		Isset __isset;

		updateSearch_args();
		virtual ~updateSearch_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateSearch_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		updateSearch_result();
		virtual ~updateSearch_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeSearch_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		expungeSearch_args();
		virtual ~expungeSearch_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeSearch_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		expungeSearch_result();
		virtual ~expungeSearch_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNotes_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool filter;
			bool offset;
			bool maxNotes;
		};

		Thrift::Protocol::TString authenticationToken;
		NoteFilter filter;
		__int32 offset;
		__int32 maxNotes;

		Isset __isset;

		findNotes_args();
		virtual ~findNotes_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNotes_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		NoteList success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		findNotes_result();
		virtual ~findNotes_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNoteOffset_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool filter;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		NoteFilter filter;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		findNoteOffset_args();
		virtual ~findNoteOffset_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNoteOffset_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		findNoteOffset_result();
		virtual ~findNoteOffset_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNotesMetadata_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool filter;
			bool offset;
			bool maxNotes;
			bool resultSpec;
		};

		Thrift::Protocol::TString authenticationToken;
		NoteFilter filter;
		__int32 offset;
		__int32 maxNotes;
		NotesMetadataResultSpec resultSpec;

		Isset __isset;

		findNotesMetadata_args();
		virtual ~findNotesMetadata_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNotesMetadata_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		NotesMetadataList success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		findNotesMetadata_result();
		virtual ~findNotesMetadata_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNoteCounts_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool filter;
			bool withTrash;
		};

		Thrift::Protocol::TString authenticationToken;
		NoteFilter filter;
		bool withTrash;

		Isset __isset;

		findNoteCounts_args();
		virtual ~findNoteCounts_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class findNoteCounts_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		NoteCollectionCounts success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		findNoteCounts_result();
		virtual ~findNoteCounts_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
			bool withContent;
			bool withResourcesData;
			bool withResourcesRecognition;
			bool withResourcesAlternateData;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;
		bool withContent;
		bool withResourcesData;
		bool withResourcesRecognition;
		bool withResourcesAlternateData;

		Isset __isset;

		getNote_args();
		virtual ~getNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Note success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNote_result();
		virtual ~getNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteContent_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getNoteContent_args();
		virtual ~getNoteContent_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteContent_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TString success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNoteContent_result();
		virtual ~getNoteContent_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteSearchText_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
			bool noteOnly;
			bool tokenizeForIndexing;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;
		bool noteOnly;
		bool tokenizeForIndexing;

		Isset __isset;

		getNoteSearchText_args();
		virtual ~getNoteSearchText_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteSearchText_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TString success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNoteSearchText_result();
		virtual ~getNoteSearchText_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceSearchText_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getResourceSearchText_args();
		virtual ~getResourceSearchText_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceSearchText_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TString success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceSearchText_result();
		virtual ~getResourceSearchText_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteTagNames_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getNoteTagNames_args();
		virtual ~getNoteTagNames_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteTagNames_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		std::vector<Thrift::Protocol::TString > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNoteTagNames_result();
		virtual ~getNoteTagNames_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool note;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Note note;

		Isset __isset;

		createNote_args();
		virtual ~createNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Note success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		createNote_result();
		virtual ~createNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool note;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Note note;

		Isset __isset;

		updateNote_args();
		virtual ~updateNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Note success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		updateNote_result();
		virtual ~updateNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class deleteNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		deleteNote_args();
		virtual ~deleteNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class deleteNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		deleteNote_result();
		virtual ~deleteNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		expungeNote_args();
		virtual ~expungeNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		expungeNote_result();
		virtual ~expungeNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNotes_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool noteGuids;
		};

		Thrift::Protocol::TString authenticationToken;
		std::vector<Evernote::EDAM::Type::Guid > noteGuids;

		Isset __isset;

		expungeNotes_args();
		virtual ~expungeNotes_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeNotes_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		expungeNotes_result();
		virtual ~expungeNotes_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeInactiveNotes_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		expungeInactiveNotes_args();
		virtual ~expungeInactiveNotes_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeInactiveNotes_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		expungeInactiveNotes_result();
		virtual ~expungeInactiveNotes_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class copyNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool noteGuid;
			bool toNotebookGuid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid noteGuid;
		Evernote::EDAM::Type::Guid toNotebookGuid;

		Isset __isset;

		copyNote_args();
		virtual ~copyNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class copyNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Note success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		copyNote_result();
		virtual ~copyNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listNoteVersions_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool noteGuid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid noteGuid;

		Isset __isset;

		listNoteVersions_args();
		virtual ~listNoteVersions_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listNoteVersions_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		std::vector<NoteVersionId > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		listNoteVersions_result();
		virtual ~listNoteVersions_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteVersion_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool noteGuid;
			bool updateSequenceNum;
			bool withResourcesData;
			bool withResourcesRecognition;
			bool withResourcesAlternateData;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid noteGuid;
		__int32 updateSequenceNum;
		bool withResourcesData;
		bool withResourcesRecognition;
		bool withResourcesAlternateData;

		Isset __isset;

		getNoteVersion_args();
		virtual ~getNoteVersion_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getNoteVersion_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Note success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getNoteVersion_result();
		virtual ~getNoteVersion_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResource_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
			bool withData;
			bool withRecognition;
			bool withAttributes;
			bool withAlternateData;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;
		bool withData;
		bool withRecognition;
		bool withAttributes;
		bool withAlternateData;

		Isset __isset;

		getResource_args();
		virtual ~getResource_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResource_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Resource success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResource_result();
		virtual ~getResource_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateResource_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool resource;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Resource resource;

		Isset __isset;

		updateResource_args();
		virtual ~updateResource_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateResource_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		updateResource_result();
		virtual ~updateResource_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceData_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getResourceData_args();
		virtual ~getResourceData_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceData_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TBinary success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceData_result();
		virtual ~getResourceData_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceByHash_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool noteGuid;
			bool contentHash;
			bool withData;
			bool withRecognition;
			bool withAlternateData;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid noteGuid;
		Thrift::Protocol::TBinary contentHash;
		bool withData;
		bool withRecognition;
		bool withAlternateData;

		Isset __isset;

		getResourceByHash_args();
		virtual ~getResourceByHash_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceByHash_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Resource success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceByHash_result();
		virtual ~getResourceByHash_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceRecognition_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getResourceRecognition_args();
		virtual ~getResourceRecognition_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceRecognition_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TBinary success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceRecognition_result();
		virtual ~getResourceRecognition_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceAlternateData_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getResourceAlternateData_args();
		virtual ~getResourceAlternateData_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceAlternateData_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Thrift::Protocol::TBinary success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceAlternateData_result();
		virtual ~getResourceAlternateData_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceAttributes_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		getResourceAttributes_args();
		virtual ~getResourceAttributes_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getResourceAttributes_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::ResourceAttributes success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getResourceAttributes_result();
		virtual ~getResourceAttributes_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getAccountSize_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		getAccountSize_args();
		virtual ~getAccountSize_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getAccountSize_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		__int64 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getAccountSize_result();
		virtual ~getAccountSize_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getAds_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool adParameters;
		};

		Thrift::Protocol::TString authenticationToken;
		AdParameters adParameters;

		Isset __isset;

		getAds_args();
		virtual ~getAds_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getAds_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::Ad > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getAds_result();
		virtual ~getAds_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getRandomAd_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool adParameters;
		};

		Thrift::Protocol::TString authenticationToken;
		AdParameters adParameters;

		Isset __isset;

		getRandomAd_args();
		virtual ~getRandomAd_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getRandomAd_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool systemException;
		};

		Evernote::EDAM::Type::Ad success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getRandomAd_result();
		virtual ~getRandomAd_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getPublicNotebook_args	
	{
	public:

		struct Isset
		{
			bool userId;
			bool publicUri;
		};

		Evernote::EDAM::Type::UserID userId;
		Thrift::Protocol::TString publicUri;

		Isset __isset;

		getPublicNotebook_args();
		virtual ~getPublicNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getPublicNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool systemException;
			bool notFoundException;
		};

		Evernote::EDAM::Type::Notebook success;
		Evernote::EDAM::Error::EDAMSystemException systemException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;

		Isset __isset;

		getPublicNotebook_result();
		virtual ~getPublicNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createSharedNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool sharedNotebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::SharedNotebook sharedNotebook;

		Isset __isset;

		createSharedNotebook_args();
		virtual ~createSharedNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createSharedNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::Type::SharedNotebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		createSharedNotebook_result();
		virtual ~createSharedNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listSharedNotebooks_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		listSharedNotebooks_args();
		virtual ~listSharedNotebooks_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listSharedNotebooks_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::SharedNotebook > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		listSharedNotebooks_result();
		virtual ~listSharedNotebooks_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeSharedNotebooks_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool sharedNotebookIds;
		};

		Thrift::Protocol::TString authenticationToken;
		std::vector<__int64 > sharedNotebookIds;

		Isset __isset;

		expungeSharedNotebooks_args();
		virtual ~expungeSharedNotebooks_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeSharedNotebooks_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		expungeSharedNotebooks_result();
		virtual ~expungeSharedNotebooks_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createLinkedNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool linkedNotebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::LinkedNotebook linkedNotebook;

		Isset __isset;

		createLinkedNotebook_args();
		virtual ~createLinkedNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class createLinkedNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::Type::LinkedNotebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		createLinkedNotebook_result();
		virtual ~createLinkedNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateLinkedNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool linkedNotebook;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::LinkedNotebook linkedNotebook;

		Isset __isset;

		updateLinkedNotebook_args();
		virtual ~updateLinkedNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class updateLinkedNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		updateLinkedNotebook_result();
		virtual ~updateLinkedNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listLinkedNotebooks_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		listLinkedNotebooks_args();
		virtual ~listLinkedNotebooks_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class listLinkedNotebooks_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		std::vector<Evernote::EDAM::Type::LinkedNotebook > success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		listLinkedNotebooks_result();
		virtual ~listLinkedNotebooks_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeLinkedNotebook_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		expungeLinkedNotebook_args();
		virtual ~expungeLinkedNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class expungeLinkedNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		__int32 success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		expungeLinkedNotebook_result();
		virtual ~expungeLinkedNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticateToSharedNotebook_args	
	{
	public:

		struct Isset
		{
			bool shareKey;
			bool authenticationToken;
		};

		Thrift::Protocol::TString shareKey;
		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		authenticateToSharedNotebook_args();
		virtual ~authenticateToSharedNotebook_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticateToSharedNotebook_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::UserStore::AuthenticationResult success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		authenticateToSharedNotebook_result();
		virtual ~authenticateToSharedNotebook_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSharedNotebookByAuth_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
		};

		Thrift::Protocol::TString authenticationToken;

		Isset __isset;

		getSharedNotebookByAuth_args();
		virtual ~getSharedNotebookByAuth_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class getSharedNotebookByAuth_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::Type::SharedNotebook success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		getSharedNotebookByAuth_result();
		virtual ~getSharedNotebookByAuth_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class emailNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool parameters;
		};

		Thrift::Protocol::TString authenticationToken;
		NoteEmailParameters parameters;

		Isset __isset;

		emailNote_args();
		virtual ~emailNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class emailNote_result	
	{
	public:

		struct Isset
		{
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		emailNote_result();
		virtual ~emailNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class shareNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		shareNote_args();
		virtual ~shareNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class shareNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Thrift::Protocol::TString success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		shareNote_result();
		virtual ~shareNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class stopSharingNote_args	
	{
	public:

		struct Isset
		{
			bool authenticationToken;
			bool guid;
		};

		Thrift::Protocol::TString authenticationToken;
		Evernote::EDAM::Type::Guid guid;

		Isset __isset;

		stopSharingNote_args();
		virtual ~stopSharingNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class stopSharingNote_result	
	{
	public:

		struct Isset
		{
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		stopSharingNote_result();
		virtual ~stopSharingNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticateToSharedNote_args	
	{
	public:

		struct Isset
		{
			bool guid;
			bool noteKey;
		};

		Thrift::Protocol::TString guid;
		Thrift::Protocol::TString noteKey;

		Isset __isset;

		authenticateToSharedNote_args();
		virtual ~authenticateToSharedNote_args() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};

	class authenticateToSharedNote_result	
	{
	public:

		struct Isset
		{
			bool success;
			bool userException;
			bool notFoundException;
			bool systemException;
		};

		Evernote::EDAM::UserStore::AuthenticationResult success;
		Evernote::EDAM::Error::EDAMUserException userException;
		Evernote::EDAM::Error::EDAMNotFoundException notFoundException;
		Evernote::EDAM::Error::EDAMSystemException systemException;

		Isset __isset;

		authenticateToSharedNote_result();
		virtual ~authenticateToSharedNote_result() throw() {}

		void Read(Thrift::Protocol::TProtocol & iprot);
		void Write(Thrift::Protocol::TProtocol & oprot);
	};
};
} // NoteStore
} // EDAM
} // Evernote
