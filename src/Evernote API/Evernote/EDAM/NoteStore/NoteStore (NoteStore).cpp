/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

SyncState NoteStore::Client::getSyncState(Thrift::Protocol::TString authenticationToken)
{
	send_getSyncState(authenticationToken);
	return recv_getSyncState();
}

void NoteStore::Client::send_getSyncState(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSyncState", Thrift::Protocol::MessageCall, seqid_));
	getSyncState_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

SyncState NoteStore::Client::recv_getSyncState()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getSyncState_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getSyncState failed: unknown result");
}

SyncChunk NoteStore::Client::getSyncChunk(Thrift::Protocol::TString authenticationToken, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly)
{
	send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly);
	return recv_getSyncChunk();
}

void NoteStore::Client::send_getSyncChunk(Thrift::Protocol::TString authenticationToken, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSyncChunk", Thrift::Protocol::MessageCall, seqid_));
	getSyncChunk_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.afterUSN = afterUSN;
	args.__isset.afterUSN = true;
	args.maxEntries = maxEntries;
	args.__isset.maxEntries = true;
	args.fullSyncOnly = fullSyncOnly;
	args.__isset.fullSyncOnly = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

SyncChunk NoteStore::Client::recv_getSyncChunk()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getSyncChunk_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getSyncChunk failed: unknown result");
}

SyncState NoteStore::Client::getLinkedNotebookSyncState(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
	return recv_getLinkedNotebookSyncState();
}

void NoteStore::Client::send_getLinkedNotebookSyncState(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getLinkedNotebookSyncState", Thrift::Protocol::MessageCall, seqid_));
	getLinkedNotebookSyncState_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.linkedNotebook = linkedNotebook;
	args.__isset.linkedNotebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

SyncState NoteStore::Client::recv_getLinkedNotebookSyncState()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getLinkedNotebookSyncState_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getLinkedNotebookSyncState failed: unknown result");
}

SyncChunk NoteStore::Client::getLinkedNotebookSyncChunk(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly)
{
	send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
	return recv_getLinkedNotebookSyncChunk();
}

void NoteStore::Client::send_getLinkedNotebookSyncChunk(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook, __int32 afterUSN, __int32 maxEntries, bool fullSyncOnly)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getLinkedNotebookSyncChunk", Thrift::Protocol::MessageCall, seqid_));
	getLinkedNotebookSyncChunk_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.linkedNotebook = linkedNotebook;
	args.__isset.linkedNotebook = true;
	args.afterUSN = afterUSN;
	args.__isset.afterUSN = true;
	args.maxEntries = maxEntries;
	args.__isset.maxEntries = true;
	args.fullSyncOnly = fullSyncOnly;
	args.__isset.fullSyncOnly = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

SyncChunk NoteStore::Client::recv_getLinkedNotebookSyncChunk()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getLinkedNotebookSyncChunk_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getLinkedNotebookSyncChunk failed: unknown result");
}

std::vector<Evernote::EDAM::Type::Notebook > NoteStore::Client::listNotebooks(Thrift::Protocol::TString authenticationToken)
{
	send_listNotebooks(authenticationToken);
	return recv_listNotebooks();
}

void NoteStore::Client::send_listNotebooks(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listNotebooks", Thrift::Protocol::MessageCall, seqid_));
	listNotebooks_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::Notebook > NoteStore::Client::recv_listNotebooks()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listNotebooks_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listNotebooks failed: unknown result");
}

Evernote::EDAM::Type::Notebook NoteStore::Client::getNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getNotebook(authenticationToken, guid);
	return recv_getNotebook();
}

void NoteStore::Client::send_getNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNotebook", Thrift::Protocol::MessageCall, seqid_));
	getNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Notebook NoteStore::Client::recv_getNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNotebook failed: unknown result");
}

Evernote::EDAM::Type::Notebook NoteStore::Client::getDefaultNotebook(Thrift::Protocol::TString authenticationToken)
{
	send_getDefaultNotebook(authenticationToken);
	return recv_getDefaultNotebook();
}

void NoteStore::Client::send_getDefaultNotebook(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getDefaultNotebook", Thrift::Protocol::MessageCall, seqid_));
	getDefaultNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Notebook NoteStore::Client::recv_getDefaultNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getDefaultNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getDefaultNotebook failed: unknown result");
}

Evernote::EDAM::Type::Notebook NoteStore::Client::createNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook)
{
	send_createNotebook(authenticationToken, notebook);
	return recv_createNotebook();
}

void NoteStore::Client::send_createNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createNotebook", Thrift::Protocol::MessageCall, seqid_));
	createNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.notebook = notebook;
	args.__isset.notebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Notebook NoteStore::Client::recv_createNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createNotebook failed: unknown result");
}

__int32 NoteStore::Client::updateNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook)
{
	send_updateNotebook(authenticationToken, notebook);
	return recv_updateNotebook();
}

void NoteStore::Client::send_updateNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Notebook notebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateNotebook", Thrift::Protocol::MessageCall, seqid_));
	updateNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.notebook = notebook;
	args.__isset.notebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_updateNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateNotebook failed: unknown result");
}

__int32 NoteStore::Client::expungeNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_expungeNotebook(authenticationToken, guid);
	return recv_expungeNotebook();
}

void NoteStore::Client::send_expungeNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNotebook", Thrift::Protocol::MessageCall, seqid_));
	expungeNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeNotebook failed: unknown result");
}

std::vector<Evernote::EDAM::Type::Tag > NoteStore::Client::listTags(Thrift::Protocol::TString authenticationToken)
{
	send_listTags(authenticationToken);
	return recv_listTags();
}

void NoteStore::Client::send_listTags(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listTags", Thrift::Protocol::MessageCall, seqid_));
	listTags_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::Tag > NoteStore::Client::recv_listTags()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listTags_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listTags failed: unknown result");
}

std::vector<Evernote::EDAM::Type::Tag > NoteStore::Client::listTagsByNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid notebookGuid)
{
	send_listTagsByNotebook(authenticationToken, notebookGuid);
	return recv_listTagsByNotebook();
}

void NoteStore::Client::send_listTagsByNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid notebookGuid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listTagsByNotebook", Thrift::Protocol::MessageCall, seqid_));
	listTagsByNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.notebookGuid = notebookGuid;
	args.__isset.notebookGuid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::Tag > NoteStore::Client::recv_listTagsByNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listTagsByNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listTagsByNotebook failed: unknown result");
}

Evernote::EDAM::Type::Tag NoteStore::Client::getTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getTag(authenticationToken, guid);
	return recv_getTag();
}

void NoteStore::Client::send_getTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getTag", Thrift::Protocol::MessageCall, seqid_));
	getTag_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Tag NoteStore::Client::recv_getTag()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getTag_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getTag failed: unknown result");
}

Evernote::EDAM::Type::Tag NoteStore::Client::createTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag)
{
	send_createTag(authenticationToken, tag);
	return recv_createTag();
}

void NoteStore::Client::send_createTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createTag", Thrift::Protocol::MessageCall, seqid_));
	createTag_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.tag = tag;
	args.__isset.tag = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Tag NoteStore::Client::recv_createTag()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createTag_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createTag failed: unknown result");
}

__int32 NoteStore::Client::updateTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag)
{
	send_updateTag(authenticationToken, tag);
	return recv_updateTag();
}

void NoteStore::Client::send_updateTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Tag tag)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateTag", Thrift::Protocol::MessageCall, seqid_));
	updateTag_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.tag = tag;
	args.__isset.tag = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_updateTag()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateTag_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateTag failed: unknown result");
}

void NoteStore::Client::untagAll(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_untagAll(authenticationToken, guid);
	recv_untagAll();
}

void NoteStore::Client::send_untagAll(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"untagAll", Thrift::Protocol::MessageCall, seqid_));
	untagAll_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

void NoteStore::Client::recv_untagAll()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	untagAll_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	return;
}

__int32 NoteStore::Client::expungeTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_expungeTag(authenticationToken, guid);
	return recv_expungeTag();
}

void NoteStore::Client::send_expungeTag(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeTag", Thrift::Protocol::MessageCall, seqid_));
	expungeTag_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeTag()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeTag_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeTag failed: unknown result");
}

std::vector<Evernote::EDAM::Type::SavedSearch > NoteStore::Client::listSearches(Thrift::Protocol::TString authenticationToken)
{
	send_listSearches(authenticationToken);
	return recv_listSearches();
}

void NoteStore::Client::send_listSearches(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listSearches", Thrift::Protocol::MessageCall, seqid_));
	listSearches_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::SavedSearch > NoteStore::Client::recv_listSearches()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listSearches_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listSearches failed: unknown result");
}

Evernote::EDAM::Type::SavedSearch NoteStore::Client::getSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getSearch(authenticationToken, guid);
	return recv_getSearch();
}

void NoteStore::Client::send_getSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSearch", Thrift::Protocol::MessageCall, seqid_));
	getSearch_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::SavedSearch NoteStore::Client::recv_getSearch()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getSearch_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getSearch failed: unknown result");
}

Evernote::EDAM::Type::SavedSearch NoteStore::Client::createSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search)
{
	send_createSearch(authenticationToken, search);
	return recv_createSearch();
}

void NoteStore::Client::send_createSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createSearch", Thrift::Protocol::MessageCall, seqid_));
	createSearch_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.search = search;
	args.__isset.search = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::SavedSearch NoteStore::Client::recv_createSearch()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createSearch_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createSearch failed: unknown result");
}

__int32 NoteStore::Client::updateSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search)
{
	send_updateSearch(authenticationToken, search);
	return recv_updateSearch();
}

void NoteStore::Client::send_updateSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SavedSearch search)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateSearch", Thrift::Protocol::MessageCall, seqid_));
	updateSearch_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.search = search;
	args.__isset.search = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_updateSearch()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateSearch_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateSearch failed: unknown result");
}

__int32 NoteStore::Client::expungeSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_expungeSearch(authenticationToken, guid);
	return recv_expungeSearch();
}

void NoteStore::Client::send_expungeSearch(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeSearch", Thrift::Protocol::MessageCall, seqid_));
	expungeSearch_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeSearch()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeSearch_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeSearch failed: unknown result");
}

NoteList NoteStore::Client::findNotes(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes)
{
	send_findNotes(authenticationToken, filter, offset, maxNotes);
	return recv_findNotes();
}

void NoteStore::Client::send_findNotes(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNotes", Thrift::Protocol::MessageCall, seqid_));
	findNotes_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.filter = filter;
	args.__isset.filter = true;
	args.offset = offset;
	args.__isset.offset = true;
	args.maxNotes = maxNotes;
	args.__isset.maxNotes = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

NoteList NoteStore::Client::recv_findNotes()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	findNotes_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"findNotes failed: unknown result");
}

__int32 NoteStore::Client::findNoteOffset(Thrift::Protocol::TString authenticationToken, NoteFilter filter, Evernote::EDAM::Type::Guid guid)
{
	send_findNoteOffset(authenticationToken, filter, guid);
	return recv_findNoteOffset();
}

void NoteStore::Client::send_findNoteOffset(Thrift::Protocol::TString authenticationToken, NoteFilter filter, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNoteOffset", Thrift::Protocol::MessageCall, seqid_));
	findNoteOffset_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.filter = filter;
	args.__isset.filter = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_findNoteOffset()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	findNoteOffset_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"findNoteOffset failed: unknown result");
}

NotesMetadataList NoteStore::Client::findNotesMetadata(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes, NotesMetadataResultSpec resultSpec)
{
	send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
	return recv_findNotesMetadata();
}

void NoteStore::Client::send_findNotesMetadata(Thrift::Protocol::TString authenticationToken, NoteFilter filter, __int32 offset, __int32 maxNotes, NotesMetadataResultSpec resultSpec)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNotesMetadata", Thrift::Protocol::MessageCall, seqid_));
	findNotesMetadata_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.filter = filter;
	args.__isset.filter = true;
	args.offset = offset;
	args.__isset.offset = true;
	args.maxNotes = maxNotes;
	args.__isset.maxNotes = true;
	args.resultSpec = resultSpec;
	args.__isset.resultSpec = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

NotesMetadataList NoteStore::Client::recv_findNotesMetadata()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	findNotesMetadata_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"findNotesMetadata failed: unknown result");
}

NoteCollectionCounts NoteStore::Client::findNoteCounts(Thrift::Protocol::TString authenticationToken, NoteFilter filter, bool withTrash)
{
	send_findNoteCounts(authenticationToken, filter, withTrash);
	return recv_findNoteCounts();
}

void NoteStore::Client::send_findNoteCounts(Thrift::Protocol::TString authenticationToken, NoteFilter filter, bool withTrash)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNoteCounts", Thrift::Protocol::MessageCall, seqid_));
	findNoteCounts_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.filter = filter;
	args.__isset.filter = true;
	args.withTrash = withTrash;
	args.__isset.withTrash = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

NoteCollectionCounts NoteStore::Client::recv_findNoteCounts()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	findNoteCounts_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"findNoteCounts failed: unknown result");
}

Evernote::EDAM::Type::Note NoteStore::Client::getNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)
{
	send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
	return recv_getNote();
}

void NoteStore::Client::send_getNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNote", Thrift::Protocol::MessageCall, seqid_));
	getNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.withContent = withContent;
	args.__isset.withContent = true;
	args.withResourcesData = withResourcesData;
	args.__isset.withResourcesData = true;
	args.withResourcesRecognition = withResourcesRecognition;
	args.__isset.withResourcesRecognition = true;
	args.withResourcesAlternateData = withResourcesAlternateData;
	args.__isset.withResourcesAlternateData = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Note NoteStore::Client::recv_getNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNote failed: unknown result");
}

Thrift::Protocol::TString NoteStore::Client::getNoteContent(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getNoteContent(authenticationToken, guid);
	return recv_getNoteContent();
}

void NoteStore::Client::send_getNoteContent(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteContent", Thrift::Protocol::MessageCall, seqid_));
	getNoteContent_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TString NoteStore::Client::recv_getNoteContent()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNoteContent_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNoteContent failed: unknown result");
}

Thrift::Protocol::TString NoteStore::Client::getNoteSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool noteOnly, bool tokenizeForIndexing)
{
	send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
	return recv_getNoteSearchText();
}

void NoteStore::Client::send_getNoteSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool noteOnly, bool tokenizeForIndexing)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteSearchText", Thrift::Protocol::MessageCall, seqid_));
	getNoteSearchText_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.noteOnly = noteOnly;
	args.__isset.noteOnly = true;
	args.tokenizeForIndexing = tokenizeForIndexing;
	args.__isset.tokenizeForIndexing = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TString NoteStore::Client::recv_getNoteSearchText()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNoteSearchText_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNoteSearchText failed: unknown result");
}

Thrift::Protocol::TString NoteStore::Client::getResourceSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getResourceSearchText(authenticationToken, guid);
	return recv_getResourceSearchText();
}

void NoteStore::Client::send_getResourceSearchText(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceSearchText", Thrift::Protocol::MessageCall, seqid_));
	getResourceSearchText_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TString NoteStore::Client::recv_getResourceSearchText()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceSearchText_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceSearchText failed: unknown result");
}

std::vector<Thrift::Protocol::TString > NoteStore::Client::getNoteTagNames(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getNoteTagNames(authenticationToken, guid);
	return recv_getNoteTagNames();
}

void NoteStore::Client::send_getNoteTagNames(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteTagNames", Thrift::Protocol::MessageCall, seqid_));
	getNoteTagNames_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Thrift::Protocol::TString > NoteStore::Client::recv_getNoteTagNames()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNoteTagNames_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNoteTagNames failed: unknown result");
}

Evernote::EDAM::Type::Note NoteStore::Client::createNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note)
{
	send_createNote(authenticationToken, note);
	return recv_createNote();
}

void NoteStore::Client::send_createNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createNote", Thrift::Protocol::MessageCall, seqid_));
	createNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.note = note;
	args.__isset.note = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Note NoteStore::Client::recv_createNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createNote failed: unknown result");
}

Evernote::EDAM::Type::Note NoteStore::Client::updateNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note)
{
	send_updateNote(authenticationToken, note);
	return recv_updateNote();
}

void NoteStore::Client::send_updateNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Note note)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateNote", Thrift::Protocol::MessageCall, seqid_));
	updateNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.note = note;
	args.__isset.note = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Note NoteStore::Client::recv_updateNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateNote failed: unknown result");
}

__int32 NoteStore::Client::deleteNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_deleteNote(authenticationToken, guid);
	return recv_deleteNote();
}

void NoteStore::Client::send_deleteNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"deleteNote", Thrift::Protocol::MessageCall, seqid_));
	deleteNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_deleteNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	deleteNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"deleteNote failed: unknown result");
}

__int32 NoteStore::Client::expungeNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_expungeNote(authenticationToken, guid);
	return recv_expungeNote();
}

void NoteStore::Client::send_expungeNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNote", Thrift::Protocol::MessageCall, seqid_));
	expungeNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeNote failed: unknown result");
}

__int32 NoteStore::Client::expungeNotes(Thrift::Protocol::TString authenticationToken, std::vector<Evernote::EDAM::Type::Guid > noteGuids)
{
	send_expungeNotes(authenticationToken, noteGuids);
	return recv_expungeNotes();
}

void NoteStore::Client::send_expungeNotes(Thrift::Protocol::TString authenticationToken, std::vector<Evernote::EDAM::Type::Guid > noteGuids)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNotes", Thrift::Protocol::MessageCall, seqid_));
	expungeNotes_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.noteGuids = noteGuids;
	args.__isset.noteGuids = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeNotes()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeNotes_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeNotes failed: unknown result");
}

__int32 NoteStore::Client::expungeInactiveNotes(Thrift::Protocol::TString authenticationToken)
{
	send_expungeInactiveNotes(authenticationToken);
	return recv_expungeInactiveNotes();
}

void NoteStore::Client::send_expungeInactiveNotes(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeInactiveNotes", Thrift::Protocol::MessageCall, seqid_));
	expungeInactiveNotes_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeInactiveNotes()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeInactiveNotes_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeInactiveNotes failed: unknown result");
}

Evernote::EDAM::Type::Note NoteStore::Client::copyNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Evernote::EDAM::Type::Guid toNotebookGuid)
{
	send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
	return recv_copyNote();
}

void NoteStore::Client::send_copyNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Evernote::EDAM::Type::Guid toNotebookGuid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"copyNote", Thrift::Protocol::MessageCall, seqid_));
	copyNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.noteGuid = noteGuid;
	args.__isset.noteGuid = true;
	args.toNotebookGuid = toNotebookGuid;
	args.__isset.toNotebookGuid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Note NoteStore::Client::recv_copyNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	copyNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"copyNote failed: unknown result");
}

std::vector<NoteVersionId > NoteStore::Client::listNoteVersions(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid)
{
	send_listNoteVersions(authenticationToken, noteGuid);
	return recv_listNoteVersions();
}

void NoteStore::Client::send_listNoteVersions(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listNoteVersions", Thrift::Protocol::MessageCall, seqid_));
	listNoteVersions_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.noteGuid = noteGuid;
	args.__isset.noteGuid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<NoteVersionId > NoteStore::Client::recv_listNoteVersions()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listNoteVersions_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listNoteVersions failed: unknown result");
}

Evernote::EDAM::Type::Note NoteStore::Client::getNoteVersion(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, __int32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)
{
	send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
	return recv_getNoteVersion();
}

void NoteStore::Client::send_getNoteVersion(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, __int32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteVersion", Thrift::Protocol::MessageCall, seqid_));
	getNoteVersion_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.noteGuid = noteGuid;
	args.__isset.noteGuid = true;
	args.updateSequenceNum = updateSequenceNum;
	args.__isset.updateSequenceNum = true;
	args.withResourcesData = withResourcesData;
	args.__isset.withResourcesData = true;
	args.withResourcesRecognition = withResourcesRecognition;
	args.__isset.withResourcesRecognition = true;
	args.withResourcesAlternateData = withResourcesAlternateData;
	args.__isset.withResourcesAlternateData = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Note NoteStore::Client::recv_getNoteVersion()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getNoteVersion_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getNoteVersion failed: unknown result");
}

Evernote::EDAM::Type::Resource NoteStore::Client::getResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)
{
	send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
	return recv_getResource();
}

void NoteStore::Client::send_getResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResource", Thrift::Protocol::MessageCall, seqid_));
	getResource_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.withData = withData;
	args.__isset.withData = true;
	args.withRecognition = withRecognition;
	args.__isset.withRecognition = true;
	args.withAttributes = withAttributes;
	args.__isset.withAttributes = true;
	args.withAlternateData = withAlternateData;
	args.__isset.withAlternateData = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Resource NoteStore::Client::recv_getResource()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResource_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResource failed: unknown result");
}

__int32 NoteStore::Client::updateResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Resource resource)
{
	send_updateResource(authenticationToken, resource);
	return recv_updateResource();
}

void NoteStore::Client::send_updateResource(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Resource resource)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateResource", Thrift::Protocol::MessageCall, seqid_));
	updateResource_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.resource = resource;
	args.__isset.resource = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_updateResource()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateResource_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateResource failed: unknown result");
}

Thrift::Protocol::TBinary NoteStore::Client::getResourceData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getResourceData(authenticationToken, guid);
	return recv_getResourceData();
}

void NoteStore::Client::send_getResourceData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceData", Thrift::Protocol::MessageCall, seqid_));
	getResourceData_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TBinary NoteStore::Client::recv_getResourceData()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceData_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceData failed: unknown result");
}

Evernote::EDAM::Type::Resource NoteStore::Client::getResourceByHash(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Thrift::Protocol::TBinary contentHash, bool withData, bool withRecognition, bool withAlternateData)
{
	send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
	return recv_getResourceByHash();
}

void NoteStore::Client::send_getResourceByHash(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid noteGuid, Thrift::Protocol::TBinary contentHash, bool withData, bool withRecognition, bool withAlternateData)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceByHash", Thrift::Protocol::MessageCall, seqid_));
	getResourceByHash_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.noteGuid = noteGuid;
	args.__isset.noteGuid = true;
	args.contentHash = contentHash;
	args.__isset.contentHash = true;
	args.withData = withData;
	args.__isset.withData = true;
	args.withRecognition = withRecognition;
	args.__isset.withRecognition = true;
	args.withAlternateData = withAlternateData;
	args.__isset.withAlternateData = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Resource NoteStore::Client::recv_getResourceByHash()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceByHash_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceByHash failed: unknown result");
}

Thrift::Protocol::TBinary NoteStore::Client::getResourceRecognition(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getResourceRecognition(authenticationToken, guid);
	return recv_getResourceRecognition();
}

void NoteStore::Client::send_getResourceRecognition(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceRecognition", Thrift::Protocol::MessageCall, seqid_));
	getResourceRecognition_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TBinary NoteStore::Client::recv_getResourceRecognition()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceRecognition_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceRecognition failed: unknown result");
}

Thrift::Protocol::TBinary NoteStore::Client::getResourceAlternateData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getResourceAlternateData(authenticationToken, guid);
	return recv_getResourceAlternateData();
}

void NoteStore::Client::send_getResourceAlternateData(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceAlternateData", Thrift::Protocol::MessageCall, seqid_));
	getResourceAlternateData_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TBinary NoteStore::Client::recv_getResourceAlternateData()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceAlternateData_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceAlternateData failed: unknown result");
}

Evernote::EDAM::Type::ResourceAttributes NoteStore::Client::getResourceAttributes(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_getResourceAttributes(authenticationToken, guid);
	return recv_getResourceAttributes();
}

void NoteStore::Client::send_getResourceAttributes(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceAttributes", Thrift::Protocol::MessageCall, seqid_));
	getResourceAttributes_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::ResourceAttributes NoteStore::Client::recv_getResourceAttributes()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getResourceAttributes_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getResourceAttributes failed: unknown result");
}

__int64 NoteStore::Client::getAccountSize(Thrift::Protocol::TString authenticationToken)
{
	send_getAccountSize(authenticationToken);
	return recv_getAccountSize();
}

void NoteStore::Client::send_getAccountSize(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getAccountSize", Thrift::Protocol::MessageCall, seqid_));
	getAccountSize_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int64 NoteStore::Client::recv_getAccountSize()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getAccountSize_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getAccountSize failed: unknown result");
}

std::vector<Evernote::EDAM::Type::Ad > NoteStore::Client::getAds(Thrift::Protocol::TString authenticationToken, AdParameters adParameters)
{
	send_getAds(authenticationToken, adParameters);
	return recv_getAds();
}

void NoteStore::Client::send_getAds(Thrift::Protocol::TString authenticationToken, AdParameters adParameters)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getAds", Thrift::Protocol::MessageCall, seqid_));
	getAds_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.adParameters = adParameters;
	args.__isset.adParameters = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::Ad > NoteStore::Client::recv_getAds()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getAds_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getAds failed: unknown result");
}

Evernote::EDAM::Type::Ad NoteStore::Client::getRandomAd(Thrift::Protocol::TString authenticationToken, AdParameters adParameters)
{
	send_getRandomAd(authenticationToken, adParameters);
	return recv_getRandomAd();
}

void NoteStore::Client::send_getRandomAd(Thrift::Protocol::TString authenticationToken, AdParameters adParameters)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getRandomAd", Thrift::Protocol::MessageCall, seqid_));
	getRandomAd_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.adParameters = adParameters;
	args.__isset.adParameters = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Ad NoteStore::Client::recv_getRandomAd()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getRandomAd_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getRandomAd failed: unknown result");
}

Evernote::EDAM::Type::Notebook NoteStore::Client::getPublicNotebook(Evernote::EDAM::Type::UserID userId, Thrift::Protocol::TString publicUri)
{
	send_getPublicNotebook(userId, publicUri);
	return recv_getPublicNotebook();
}

void NoteStore::Client::send_getPublicNotebook(Evernote::EDAM::Type::UserID userId, Thrift::Protocol::TString publicUri)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getPublicNotebook", Thrift::Protocol::MessageCall, seqid_));
	getPublicNotebook_args args;
	args.userId = userId;
	args.__isset.userId = true;
	args.publicUri = publicUri;
	args.__isset.publicUri = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::Notebook NoteStore::Client::recv_getPublicNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getPublicNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getPublicNotebook failed: unknown result");
}

Evernote::EDAM::Type::SharedNotebook NoteStore::Client::createSharedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SharedNotebook sharedNotebook)
{
	send_createSharedNotebook(authenticationToken, sharedNotebook);
	return recv_createSharedNotebook();
}

void NoteStore::Client::send_createSharedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::SharedNotebook sharedNotebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createSharedNotebook", Thrift::Protocol::MessageCall, seqid_));
	createSharedNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.sharedNotebook = sharedNotebook;
	args.__isset.sharedNotebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::SharedNotebook NoteStore::Client::recv_createSharedNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createSharedNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createSharedNotebook failed: unknown result");
}

std::vector<Evernote::EDAM::Type::SharedNotebook > NoteStore::Client::listSharedNotebooks(Thrift::Protocol::TString authenticationToken)
{
	send_listSharedNotebooks(authenticationToken);
	return recv_listSharedNotebooks();
}

void NoteStore::Client::send_listSharedNotebooks(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listSharedNotebooks", Thrift::Protocol::MessageCall, seqid_));
	listSharedNotebooks_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::SharedNotebook > NoteStore::Client::recv_listSharedNotebooks()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listSharedNotebooks_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listSharedNotebooks failed: unknown result");
}

__int32 NoteStore::Client::expungeSharedNotebooks(Thrift::Protocol::TString authenticationToken, std::vector<__int64 > sharedNotebookIds)
{
	send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds);
	return recv_expungeSharedNotebooks();
}

void NoteStore::Client::send_expungeSharedNotebooks(Thrift::Protocol::TString authenticationToken, std::vector<__int64 > sharedNotebookIds)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeSharedNotebooks", Thrift::Protocol::MessageCall, seqid_));
	expungeSharedNotebooks_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.sharedNotebookIds = sharedNotebookIds;
	args.__isset.sharedNotebookIds = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeSharedNotebooks()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeSharedNotebooks_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeSharedNotebooks failed: unknown result");
}

Evernote::EDAM::Type::LinkedNotebook NoteStore::Client::createLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	send_createLinkedNotebook(authenticationToken, linkedNotebook);
	return recv_createLinkedNotebook();
}

void NoteStore::Client::send_createLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"createLinkedNotebook", Thrift::Protocol::MessageCall, seqid_));
	createLinkedNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.linkedNotebook = linkedNotebook;
	args.__isset.linkedNotebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::LinkedNotebook NoteStore::Client::recv_createLinkedNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	createLinkedNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"createLinkedNotebook failed: unknown result");
}

__int32 NoteStore::Client::updateLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	send_updateLinkedNotebook(authenticationToken, linkedNotebook);
	return recv_updateLinkedNotebook();
}

void NoteStore::Client::send_updateLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::LinkedNotebook linkedNotebook)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateLinkedNotebook", Thrift::Protocol::MessageCall, seqid_));
	updateLinkedNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.linkedNotebook = linkedNotebook;
	args.__isset.linkedNotebook = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_updateLinkedNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	updateLinkedNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"updateLinkedNotebook failed: unknown result");
}

std::vector<Evernote::EDAM::Type::LinkedNotebook > NoteStore::Client::listLinkedNotebooks(Thrift::Protocol::TString authenticationToken)
{
	send_listLinkedNotebooks(authenticationToken);
	return recv_listLinkedNotebooks();
}

void NoteStore::Client::send_listLinkedNotebooks(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"listLinkedNotebooks", Thrift::Protocol::MessageCall, seqid_));
	listLinkedNotebooks_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

std::vector<Evernote::EDAM::Type::LinkedNotebook > NoteStore::Client::recv_listLinkedNotebooks()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	listLinkedNotebooks_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"listLinkedNotebooks failed: unknown result");
}

__int32 NoteStore::Client::expungeLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_expungeLinkedNotebook(authenticationToken, guid);
	return recv_expungeLinkedNotebook();
}

void NoteStore::Client::send_expungeLinkedNotebook(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeLinkedNotebook", Thrift::Protocol::MessageCall, seqid_));
	expungeLinkedNotebook_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

__int32 NoteStore::Client::recv_expungeLinkedNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	expungeLinkedNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"expungeLinkedNotebook failed: unknown result");
}

Evernote::EDAM::UserStore::AuthenticationResult NoteStore::Client::authenticateToSharedNotebook(Thrift::Protocol::TString shareKey, Thrift::Protocol::TString authenticationToken)
{
	send_authenticateToSharedNotebook(shareKey, authenticationToken);
	return recv_authenticateToSharedNotebook();
}

void NoteStore::Client::send_authenticateToSharedNotebook(Thrift::Protocol::TString shareKey, Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"authenticateToSharedNotebook", Thrift::Protocol::MessageCall, seqid_));
	authenticateToSharedNotebook_args args;
	args.shareKey = shareKey;
	args.__isset.shareKey = true;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::UserStore::AuthenticationResult NoteStore::Client::recv_authenticateToSharedNotebook()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	authenticateToSharedNotebook_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"authenticateToSharedNotebook failed: unknown result");
}

Evernote::EDAM::Type::SharedNotebook NoteStore::Client::getSharedNotebookByAuth(Thrift::Protocol::TString authenticationToken)
{
	send_getSharedNotebookByAuth(authenticationToken);
	return recv_getSharedNotebookByAuth();
}

void NoteStore::Client::send_getSharedNotebookByAuth(Thrift::Protocol::TString authenticationToken)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSharedNotebookByAuth", Thrift::Protocol::MessageCall, seqid_));
	getSharedNotebookByAuth_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::Type::SharedNotebook NoteStore::Client::recv_getSharedNotebookByAuth()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	getSharedNotebookByAuth_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"getSharedNotebookByAuth failed: unknown result");
}

void NoteStore::Client::emailNote(Thrift::Protocol::TString authenticationToken, NoteEmailParameters parameters)
{
	send_emailNote(authenticationToken, parameters);
	recv_emailNote();
}

void NoteStore::Client::send_emailNote(Thrift::Protocol::TString authenticationToken, NoteEmailParameters parameters)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"emailNote", Thrift::Protocol::MessageCall, seqid_));
	emailNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.parameters = parameters;
	args.__isset.parameters = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

void NoteStore::Client::recv_emailNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	emailNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	return;
}

Thrift::Protocol::TString NoteStore::Client::shareNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_shareNote(authenticationToken, guid);
	return recv_shareNote();
}

void NoteStore::Client::send_shareNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"shareNote", Thrift::Protocol::MessageCall, seqid_));
	shareNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Thrift::Protocol::TString NoteStore::Client::recv_shareNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	shareNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"shareNote failed: unknown result");
}

void NoteStore::Client::stopSharingNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	send_stopSharingNote(authenticationToken, guid);
	recv_stopSharingNote();
}

void NoteStore::Client::send_stopSharingNote(Thrift::Protocol::TString authenticationToken, Evernote::EDAM::Type::Guid guid)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"stopSharingNote", Thrift::Protocol::MessageCall, seqid_));
	stopSharingNote_args args;
	args.authenticationToken = authenticationToken;
	args.__isset.authenticationToken = true;
	args.guid = guid;
	args.__isset.guid = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

void NoteStore::Client::recv_stopSharingNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	stopSharingNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	return;
}

Evernote::EDAM::UserStore::AuthenticationResult NoteStore::Client::authenticateToSharedNote(Thrift::Protocol::TString guid, Thrift::Protocol::TString noteKey)
{
	send_authenticateToSharedNote(guid, noteKey);
	return recv_authenticateToSharedNote();
}

void NoteStore::Client::send_authenticateToSharedNote(Thrift::Protocol::TString guid, Thrift::Protocol::TString noteKey)
{
	oprot_.WriteMessageBegin(Thrift::Protocol::TMessage(L"authenticateToSharedNote", Thrift::Protocol::MessageCall, seqid_));
	authenticateToSharedNote_args args;
	args.guid = guid;
	args.__isset.guid = true;
	args.noteKey = noteKey;
	args.__isset.noteKey = true;
	args.Write(oprot_);
	oprot_.WriteMessageEnd();
	oprot_.GetTransport().Flush();
}

Evernote::EDAM::UserStore::AuthenticationResult NoteStore::Client::recv_authenticateToSharedNote()
{
	Thrift::Protocol::TMessage msg;
	iprot_.ReadMessageBegin(msg);
	if (msg.GetType() == Thrift::Protocol::MessageException)
	{
		Thrift::TApplicationException x = Thrift::TApplicationException::Read(iprot_);
		iprot_.ReadMessageEnd();
		throw x;
	}
	authenticateToSharedNote_result result;
	result.Read(iprot_);
	iprot_.ReadMessageEnd();
	if (result.__isset.success)
	{
		return result.success;
	}
	if (result.__isset.userException)
	{
		throw result.userException;
	}
	if (result.__isset.notFoundException)
	{
		throw result.notFoundException;
	}
	if (result.__isset.systemException)
	{
		throw result.systemException;
	}
	throw Thrift::TApplicationException(Thrift::TApplicationException::MissingResult, L"authenticateToSharedNote failed: unknown result");
}

NoteStore::Processor::Processor(Iface & iface) : iface_(iface)
{
	processMap_[L"getSyncState"] = &Processor::getSyncState_Process;
	processMap_[L"getSyncChunk"] = &Processor::getSyncChunk_Process;
	processMap_[L"getLinkedNotebookSyncState"] = &Processor::getLinkedNotebookSyncState_Process;
	processMap_[L"getLinkedNotebookSyncChunk"] = &Processor::getLinkedNotebookSyncChunk_Process;
	processMap_[L"listNotebooks"] = &Processor::listNotebooks_Process;
	processMap_[L"getNotebook"] = &Processor::getNotebook_Process;
	processMap_[L"getDefaultNotebook"] = &Processor::getDefaultNotebook_Process;
	processMap_[L"createNotebook"] = &Processor::createNotebook_Process;
	processMap_[L"updateNotebook"] = &Processor::updateNotebook_Process;
	processMap_[L"expungeNotebook"] = &Processor::expungeNotebook_Process;
	processMap_[L"listTags"] = &Processor::listTags_Process;
	processMap_[L"listTagsByNotebook"] = &Processor::listTagsByNotebook_Process;
	processMap_[L"getTag"] = &Processor::getTag_Process;
	processMap_[L"createTag"] = &Processor::createTag_Process;
	processMap_[L"updateTag"] = &Processor::updateTag_Process;
	processMap_[L"untagAll"] = &Processor::untagAll_Process;
	processMap_[L"expungeTag"] = &Processor::expungeTag_Process;
	processMap_[L"listSearches"] = &Processor::listSearches_Process;
	processMap_[L"getSearch"] = &Processor::getSearch_Process;
	processMap_[L"createSearch"] = &Processor::createSearch_Process;
	processMap_[L"updateSearch"] = &Processor::updateSearch_Process;
	processMap_[L"expungeSearch"] = &Processor::expungeSearch_Process;
	processMap_[L"findNotes"] = &Processor::findNotes_Process;
	processMap_[L"findNoteOffset"] = &Processor::findNoteOffset_Process;
	processMap_[L"findNotesMetadata"] = &Processor::findNotesMetadata_Process;
	processMap_[L"findNoteCounts"] = &Processor::findNoteCounts_Process;
	processMap_[L"getNote"] = &Processor::getNote_Process;
	processMap_[L"getNoteContent"] = &Processor::getNoteContent_Process;
	processMap_[L"getNoteSearchText"] = &Processor::getNoteSearchText_Process;
	processMap_[L"getResourceSearchText"] = &Processor::getResourceSearchText_Process;
	processMap_[L"getNoteTagNames"] = &Processor::getNoteTagNames_Process;
	processMap_[L"createNote"] = &Processor::createNote_Process;
	processMap_[L"updateNote"] = &Processor::updateNote_Process;
	processMap_[L"deleteNote"] = &Processor::deleteNote_Process;
	processMap_[L"expungeNote"] = &Processor::expungeNote_Process;
	processMap_[L"expungeNotes"] = &Processor::expungeNotes_Process;
	processMap_[L"expungeInactiveNotes"] = &Processor::expungeInactiveNotes_Process;
	processMap_[L"copyNote"] = &Processor::copyNote_Process;
	processMap_[L"listNoteVersions"] = &Processor::listNoteVersions_Process;
	processMap_[L"getNoteVersion"] = &Processor::getNoteVersion_Process;
	processMap_[L"getResource"] = &Processor::getResource_Process;
	processMap_[L"updateResource"] = &Processor::updateResource_Process;
	processMap_[L"getResourceData"] = &Processor::getResourceData_Process;
	processMap_[L"getResourceByHash"] = &Processor::getResourceByHash_Process;
	processMap_[L"getResourceRecognition"] = &Processor::getResourceRecognition_Process;
	processMap_[L"getResourceAlternateData"] = &Processor::getResourceAlternateData_Process;
	processMap_[L"getResourceAttributes"] = &Processor::getResourceAttributes_Process;
	processMap_[L"getAccountSize"] = &Processor::getAccountSize_Process;
	processMap_[L"getAds"] = &Processor::getAds_Process;
	processMap_[L"getRandomAd"] = &Processor::getRandomAd_Process;
	processMap_[L"getPublicNotebook"] = &Processor::getPublicNotebook_Process;
	processMap_[L"createSharedNotebook"] = &Processor::createSharedNotebook_Process;
	processMap_[L"listSharedNotebooks"] = &Processor::listSharedNotebooks_Process;
	processMap_[L"expungeSharedNotebooks"] = &Processor::expungeSharedNotebooks_Process;
	processMap_[L"createLinkedNotebook"] = &Processor::createLinkedNotebook_Process;
	processMap_[L"updateLinkedNotebook"] = &Processor::updateLinkedNotebook_Process;
	processMap_[L"listLinkedNotebooks"] = &Processor::listLinkedNotebooks_Process;
	processMap_[L"expungeLinkedNotebook"] = &Processor::expungeLinkedNotebook_Process;
	processMap_[L"authenticateToSharedNotebook"] = &Processor::authenticateToSharedNotebook_Process;
	processMap_[L"getSharedNotebookByAuth"] = &Processor::getSharedNotebookByAuth_Process;
	processMap_[L"emailNote"] = &Processor::emailNote_Process;
	processMap_[L"shareNote"] = &Processor::shareNote_Process;
	processMap_[L"stopSharingNote"] = &Processor::stopSharingNote_Process;
	processMap_[L"authenticateToSharedNote"] = &Processor::authenticateToSharedNote_Process;
}

bool NoteStore::Processor::Process(Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TMessage msg;
	iprot.ReadMessageBegin(msg);
	ProcessMap::iterator fn = processMap_.find(msg.GetName());
	if (fn == processMap_.end())
	{
		Thrift::Protocol::TProtocolUtil::Skip(iprot, Thrift::Protocol::TypeStruct);
		iprot.ReadMessageEnd();
		Thrift::TApplicationException x(Thrift::TApplicationException::UnknownMethod, (std::wstring(L"Invalid method name: '") + msg.GetName() + L"'").c_str());
		oprot.WriteMessageBegin(Thrift::Protocol::TMessage(msg.GetName(), Thrift::Protocol::MessageException, msg.GetSeqID()));
		x.Write(oprot);
		oprot.WriteMessageEnd();
		oprot.GetTransport().Flush();
		return true;
	}
	(this->*fn->second)(msg.GetSeqID(), iprot, oprot);
	return true;
}

void NoteStore::Processor::getSyncState_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getSyncState_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getSyncState_result result;
	try
	{
		result.success = iface_.getSyncState(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSyncState", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getSyncChunk_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getSyncChunk_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getSyncChunk_result result;
	try
	{
		result.success = iface_.getSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.fullSyncOnly);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSyncChunk", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getLinkedNotebookSyncState_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getLinkedNotebookSyncState_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getLinkedNotebookSyncState_result result;
	try
	{
		result.success = iface_.getLinkedNotebookSyncState(args.authenticationToken, args.linkedNotebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getLinkedNotebookSyncState", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getLinkedNotebookSyncChunk_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getLinkedNotebookSyncChunk_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getLinkedNotebookSyncChunk_result result;
	try
	{
		result.success = iface_.getLinkedNotebookSyncChunk(args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getLinkedNotebookSyncChunk", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listNotebooks_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listNotebooks_result result;
	try
	{
		result.success = iface_.listNotebooks(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listNotebooks", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNotebook_result result;
	try
	{
		result.success = iface_.getNotebook(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getDefaultNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getDefaultNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getDefaultNotebook_result result;
	try
	{
		result.success = iface_.getDefaultNotebook(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getDefaultNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createNotebook_result result;
	try
	{
		result.success = iface_.createNotebook(args.authenticationToken, args.notebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateNotebook_result result;
	try
	{
		result.success = iface_.updateNotebook(args.authenticationToken, args.notebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeNotebook_result result;
	try
	{
		result.success = iface_.expungeNotebook(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listTags_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listTags_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listTags_result result;
	try
	{
		result.success = iface_.listTags(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listTags", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listTagsByNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listTagsByNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listTagsByNotebook_result result;
	try
	{
		result.success = iface_.listTagsByNotebook(args.authenticationToken, args.notebookGuid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listTagsByNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getTag_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getTag_result result;
	try
	{
		result.success = iface_.getTag(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getTag", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createTag_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createTag_result result;
	try
	{
		result.success = iface_.createTag(args.authenticationToken, args.tag);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createTag", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateTag_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateTag_result result;
	try
	{
		result.success = iface_.updateTag(args.authenticationToken, args.tag);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateTag", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::untagAll_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	untagAll_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	untagAll_result result;
	try
	{
		iface_.untagAll(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"untagAll", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeTag_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeTag_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeTag_result result;
	try
	{
		result.success = iface_.expungeTag(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeTag", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listSearches_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listSearches_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listSearches_result result;
	try
	{
		result.success = iface_.listSearches(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listSearches", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getSearch_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getSearch_result result;
	try
	{
		result.success = iface_.getSearch(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSearch", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createSearch_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createSearch_result result;
	try
	{
		result.success = iface_.createSearch(args.authenticationToken, args.search);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createSearch", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateSearch_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateSearch_result result;
	try
	{
		result.success = iface_.updateSearch(args.authenticationToken, args.search);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateSearch", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeSearch_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeSearch_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeSearch_result result;
	try
	{
		result.success = iface_.expungeSearch(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeSearch", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::findNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	findNotes_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	findNotes_result result;
	try
	{
		result.success = iface_.findNotes(args.authenticationToken, args.filter, args.offset, args.maxNotes);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNotes", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::findNoteOffset_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	findNoteOffset_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	findNoteOffset_result result;
	try
	{
		result.success = iface_.findNoteOffset(args.authenticationToken, args.filter, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNoteOffset", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::findNotesMetadata_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	findNotesMetadata_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	findNotesMetadata_result result;
	try
	{
		result.success = iface_.findNotesMetadata(args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNotesMetadata", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::findNoteCounts_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	findNoteCounts_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	findNoteCounts_result result;
	try
	{
		result.success = iface_.findNoteCounts(args.authenticationToken, args.filter, args.withTrash);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"findNoteCounts", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNote_result result;
	try
	{
		result.success = iface_.getNote(args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNoteContent_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNoteContent_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNoteContent_result result;
	try
	{
		result.success = iface_.getNoteContent(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteContent", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNoteSearchText_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNoteSearchText_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNoteSearchText_result result;
	try
	{
		result.success = iface_.getNoteSearchText(args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteSearchText", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceSearchText_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceSearchText_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceSearchText_result result;
	try
	{
		result.success = iface_.getResourceSearchText(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceSearchText", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNoteTagNames_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNoteTagNames_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNoteTagNames_result result;
	try
	{
		result.success = iface_.getNoteTagNames(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteTagNames", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createNote_result result;
	try
	{
		result.success = iface_.createNote(args.authenticationToken, args.note);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateNote_result result;
	try
	{
		result.success = iface_.updateNote(args.authenticationToken, args.note);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::deleteNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	deleteNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	deleteNote_result result;
	try
	{
		result.success = iface_.deleteNote(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"deleteNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeNote_result result;
	try
	{
		result.success = iface_.expungeNote(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeNotes_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeNotes_result result;
	try
	{
		result.success = iface_.expungeNotes(args.authenticationToken, args.noteGuids);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeNotes", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeInactiveNotes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeInactiveNotes_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeInactiveNotes_result result;
	try
	{
		result.success = iface_.expungeInactiveNotes(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeInactiveNotes", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::copyNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	copyNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	copyNote_result result;
	try
	{
		result.success = iface_.copyNote(args.authenticationToken, args.noteGuid, args.toNotebookGuid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"copyNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listNoteVersions_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listNoteVersions_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listNoteVersions_result result;
	try
	{
		result.success = iface_.listNoteVersions(args.authenticationToken, args.noteGuid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listNoteVersions", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getNoteVersion_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getNoteVersion_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getNoteVersion_result result;
	try
	{
		result.success = iface_.getNoteVersion(args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getNoteVersion", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResource_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResource_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResource_result result;
	try
	{
		result.success = iface_.getResource(args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResource", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateResource_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateResource_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateResource_result result;
	try
	{
		result.success = iface_.updateResource(args.authenticationToken, args.resource);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateResource", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceData_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceData_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceData_result result;
	try
	{
		result.success = iface_.getResourceData(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceData", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceByHash_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceByHash_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceByHash_result result;
	try
	{
		result.success = iface_.getResourceByHash(args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceByHash", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceRecognition_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceRecognition_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceRecognition_result result;
	try
	{
		result.success = iface_.getResourceRecognition(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceRecognition", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceAlternateData_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceAlternateData_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceAlternateData_result result;
	try
	{
		result.success = iface_.getResourceAlternateData(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceAlternateData", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getResourceAttributes_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getResourceAttributes_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getResourceAttributes_result result;
	try
	{
		result.success = iface_.getResourceAttributes(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getResourceAttributes", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getAccountSize_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getAccountSize_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getAccountSize_result result;
	try
	{
		result.success = iface_.getAccountSize(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getAccountSize", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getAds_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getAds_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getAds_result result;
	try
	{
		result.success = iface_.getAds(args.authenticationToken, args.adParameters);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getAds", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getRandomAd_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getRandomAd_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getRandomAd_result result;
	try
	{
		result.success = iface_.getRandomAd(args.authenticationToken, args.adParameters);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getRandomAd", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getPublicNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getPublicNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getPublicNotebook_result result;
	try
	{
		result.success = iface_.getPublicNotebook(args.userId, args.publicUri);
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getPublicNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createSharedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createSharedNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createSharedNotebook_result result;
	try
	{
		result.success = iface_.createSharedNotebook(args.authenticationToken, args.sharedNotebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createSharedNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listSharedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listSharedNotebooks_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listSharedNotebooks_result result;
	try
	{
		result.success = iface_.listSharedNotebooks(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listSharedNotebooks", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeSharedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeSharedNotebooks_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeSharedNotebooks_result result;
	try
	{
		result.success = iface_.expungeSharedNotebooks(args.authenticationToken, args.sharedNotebookIds);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeSharedNotebooks", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::createLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	createLinkedNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	createLinkedNotebook_result result;
	try
	{
		result.success = iface_.createLinkedNotebook(args.authenticationToken, args.linkedNotebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"createLinkedNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::updateLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	updateLinkedNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	updateLinkedNotebook_result result;
	try
	{
		result.success = iface_.updateLinkedNotebook(args.authenticationToken, args.linkedNotebook);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"updateLinkedNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::listLinkedNotebooks_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	listLinkedNotebooks_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	listLinkedNotebooks_result result;
	try
	{
		result.success = iface_.listLinkedNotebooks(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"listLinkedNotebooks", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::expungeLinkedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	expungeLinkedNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	expungeLinkedNotebook_result result;
	try
	{
		result.success = iface_.expungeLinkedNotebook(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"expungeLinkedNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::authenticateToSharedNotebook_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	authenticateToSharedNotebook_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	authenticateToSharedNotebook_result result;
	try
	{
		result.success = iface_.authenticateToSharedNotebook(args.shareKey, args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"authenticateToSharedNotebook", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::getSharedNotebookByAuth_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	getSharedNotebookByAuth_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	getSharedNotebookByAuth_result result;
	try
	{
		result.success = iface_.getSharedNotebookByAuth(args.authenticationToken);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"getSharedNotebookByAuth", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::emailNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	emailNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	emailNote_result result;
	try
	{
		iface_.emailNote(args.authenticationToken, args.parameters);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"emailNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::shareNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	shareNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	shareNote_result result;
	try
	{
		result.success = iface_.shareNote(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"shareNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::stopSharingNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	stopSharingNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	stopSharingNote_result result;
	try
	{
		iface_.stopSharingNote(args.authenticationToken, args.guid);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"stopSharingNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

void NoteStore::Processor::authenticateToSharedNote_Process(int seqid, Thrift::Protocol::TProtocol & iprot, Thrift::Protocol::TProtocol & oprot)
{
	authenticateToSharedNote_args args;
	args.Read(iprot);
	iprot.ReadMessageEnd();
	authenticateToSharedNote_result result;
	try
	{
		result.success = iface_.authenticateToSharedNote(args.guid, args.noteKey);
	}
	catch (Evernote::EDAM::Error::EDAMUserException userException)
	{
		result.userException = userException;
	}
	catch (Evernote::EDAM::Error::EDAMNotFoundException notFoundException)
	{
		result.notFoundException = notFoundException;
	}
	catch (Evernote::EDAM::Error::EDAMSystemException systemException)
	{
		result.systemException = systemException;
	}
	oprot.WriteMessageBegin(Thrift::Protocol::TMessage(L"authenticateToSharedNote", Thrift::Protocol::MessageReply, seqid)); 
	result.Write(oprot);
	oprot.WriteMessageEnd();
	oprot.GetTransport().Flush();
}

NoteStore::getSyncState_args::getSyncState_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSyncState_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSyncState_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSyncState_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getSyncState_result::getSyncState_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSyncState_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSyncState_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSyncState_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getSyncChunk_args::getSyncChunk_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSyncChunk_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->afterUSN = iprot.ReadI32();
				this->__isset.afterUSN = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->maxEntries = iprot.ReadI32();
				this->__isset.maxEntries = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->fullSyncOnly = iprot.ReadBool();
				this->__isset.fullSyncOnly = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSyncChunk_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSyncChunk_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.afterUSN)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"afterUSN");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->afterUSN);
		oprot.WriteFieldEnd();
	}
	if (__isset.maxEntries)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"maxEntries");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->maxEntries);
		oprot.WriteFieldEnd();
	}
	if (__isset.fullSyncOnly)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"fullSyncOnly");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->fullSyncOnly);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getSyncChunk_result::getSyncChunk_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSyncChunk_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSyncChunk_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSyncChunk_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getLinkedNotebookSyncState_args::getLinkedNotebookSyncState_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getLinkedNotebookSyncState_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->linkedNotebook.Read(iprot);
				this->__isset.linkedNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getLinkedNotebookSyncState_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getLinkedNotebookSyncState_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.linkedNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"linkedNotebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->linkedNotebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getLinkedNotebookSyncState_result::getLinkedNotebookSyncState_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getLinkedNotebookSyncState_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getLinkedNotebookSyncState_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getLinkedNotebookSyncState_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getLinkedNotebookSyncChunk_args::getLinkedNotebookSyncChunk_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getLinkedNotebookSyncChunk_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->linkedNotebook.Read(iprot);
				this->__isset.linkedNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->afterUSN = iprot.ReadI32();
				this->__isset.afterUSN = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->maxEntries = iprot.ReadI32();
				this->__isset.maxEntries = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->fullSyncOnly = iprot.ReadBool();
				this->__isset.fullSyncOnly = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getLinkedNotebookSyncChunk_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getLinkedNotebookSyncChunk_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.linkedNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"linkedNotebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->linkedNotebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.afterUSN)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"afterUSN");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->afterUSN);
		oprot.WriteFieldEnd();
	}
	if (__isset.maxEntries)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"maxEntries");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->maxEntries);
		oprot.WriteFieldEnd();
	}
	if (__isset.fullSyncOnly)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"fullSyncOnly");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->fullSyncOnly);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getLinkedNotebookSyncChunk_result::getLinkedNotebookSyncChunk_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getLinkedNotebookSyncChunk_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getLinkedNotebookSyncChunk_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getLinkedNotebookSyncChunk_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listNotebooks_args::listNotebooks_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listNotebooks_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listNotebooks_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listNotebooks_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listNotebooks_result::listNotebooks_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listNotebooks_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list103;
					iprot.ReadListBegin(_list103);
					for (int _i104 = 0; _i104 < _list103.GetCount(); ++_i104)
					{
						Evernote::EDAM::Type::Notebook _elem105;
						_elem105.Read(iprot);
						this->success.push_back(_elem105);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listNotebooks_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listNotebooks_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Notebook >::iterator _iter106(this->success.begin()), end(this->success.end()); _iter106 != end; ++_iter106)
			{
				(*_iter106).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNotebook_args::getNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNotebook_result::getNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getDefaultNotebook_args::getDefaultNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getDefaultNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getDefaultNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getDefaultNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getDefaultNotebook_result::getDefaultNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getDefaultNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getDefaultNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getDefaultNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createNotebook_args::createNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notebook.Read(iprot);
				this->__isset.notebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.notebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createNotebook_result::createNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateNotebook_args::updateNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notebook.Read(iprot);
				this->__isset.notebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.notebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateNotebook_result::updateNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeNotebook_args::expungeNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeNotebook_result::expungeNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listTags_args::listTags_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listTags_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listTags_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listTags_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listTags_result::listTags_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listTags_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list107;
					iprot.ReadListBegin(_list107);
					for (int _i108 = 0; _i108 < _list107.GetCount(); ++_i108)
					{
						Evernote::EDAM::Type::Tag _elem109;
						_elem109.Read(iprot);
						this->success.push_back(_elem109);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listTags_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listTags_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Tag >::iterator _iter110(this->success.begin()), end(this->success.end()); _iter110 != end; ++_iter110)
			{
				(*_iter110).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listTagsByNotebook_args::listTagsByNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listTagsByNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->notebookGuid);
				this->__isset.notebookGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listTagsByNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listTagsByNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.notebookGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebookGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->notebookGuid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listTagsByNotebook_result::listTagsByNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listTagsByNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list111;
					iprot.ReadListBegin(_list111);
					for (int _i112 = 0; _i112 < _list111.GetCount(); ++_i112)
					{
						Evernote::EDAM::Type::Tag _elem113;
						_elem113.Read(iprot);
						this->success.push_back(_elem113);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listTagsByNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listTagsByNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Tag >::iterator _iter114(this->success.begin()), end(this->success.end()); _iter114 != end; ++_iter114)
			{
				(*_iter114).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getTag_args::getTag_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getTag_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getTag_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getTag_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getTag_result::getTag_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getTag_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getTag_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getTag_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createTag_args::createTag_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createTag_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->tag.Read(iprot);
				this->__isset.tag = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createTag_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createTag_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.tag)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tag");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->tag.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createTag_result::createTag_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createTag_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createTag_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createTag_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateTag_args::updateTag_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateTag_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->tag.Read(iprot);
				this->__isset.tag = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateTag_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateTag_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.tag)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tag");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->tag.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateTag_result::updateTag_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateTag_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateTag_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateTag_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::untagAll_args::untagAll_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::untagAll_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::untagAll_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"untagAll_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::untagAll_result::untagAll_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::untagAll_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::untagAll_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"untagAll_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeTag_args::expungeTag_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeTag_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeTag_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeTag_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeTag_result::expungeTag_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeTag_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeTag_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeTag_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listSearches_args::listSearches_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listSearches_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listSearches_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listSearches_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listSearches_result::listSearches_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listSearches_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list115;
					iprot.ReadListBegin(_list115);
					for (int _i116 = 0; _i116 < _list115.GetCount(); ++_i116)
					{
						Evernote::EDAM::Type::SavedSearch _elem117;
						_elem117.Read(iprot);
						this->success.push_back(_elem117);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listSearches_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listSearches_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::SavedSearch >::iterator _iter118(this->success.begin()), end(this->success.end()); _iter118 != end; ++_iter118)
			{
				(*_iter118).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getSearch_args::getSearch_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSearch_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSearch_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSearch_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getSearch_result::getSearch_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSearch_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSearch_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSearch_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createSearch_args::createSearch_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createSearch_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->search.Read(iprot);
				this->__isset.search = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createSearch_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createSearch_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.search)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"search");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->search.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createSearch_result::createSearch_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createSearch_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createSearch_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createSearch_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateSearch_args::updateSearch_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateSearch_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->search.Read(iprot);
				this->__isset.search = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateSearch_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateSearch_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.search)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"search");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->search.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateSearch_result::updateSearch_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateSearch_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateSearch_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateSearch_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeSearch_args::expungeSearch_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeSearch_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeSearch_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeSearch_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeSearch_result::expungeSearch_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeSearch_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeSearch_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeSearch_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::findNotes_args::findNotes_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNotes_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->filter.Read(iprot);
				this->__isset.filter = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->offset = iprot.ReadI32();
				this->__isset.offset = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->maxNotes = iprot.ReadI32();
				this->__isset.maxNotes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNotes_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNotes_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.filter)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"filter");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->filter.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.offset)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"offset");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->offset);
		oprot.WriteFieldEnd();
	}
	if (__isset.maxNotes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"maxNotes");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->maxNotes);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::findNotes_result::findNotes_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNotes_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNotes_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNotes_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::findNoteOffset_args::findNoteOffset_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNoteOffset_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->filter.Read(iprot);
				this->__isset.filter = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNoteOffset_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNoteOffset_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.filter)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"filter");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->filter.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::findNoteOffset_result::findNoteOffset_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNoteOffset_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNoteOffset_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNoteOffset_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::findNotesMetadata_args::findNotesMetadata_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNotesMetadata_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->filter.Read(iprot);
				this->__isset.filter = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->offset = iprot.ReadI32();
				this->__isset.offset = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->maxNotes = iprot.ReadI32();
				this->__isset.maxNotes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->resultSpec.Read(iprot);
				this->__isset.resultSpec = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNotesMetadata_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNotesMetadata_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.filter)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"filter");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->filter.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.offset)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"offset");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->offset);
		oprot.WriteFieldEnd();
	}
	if (__isset.maxNotes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"maxNotes");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->maxNotes);
		oprot.WriteFieldEnd();
	}
	if (__isset.resultSpec)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"resultSpec");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		this->resultSpec.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::findNotesMetadata_result::findNotesMetadata_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNotesMetadata_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNotesMetadata_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNotesMetadata_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::findNoteCounts_args::findNoteCounts_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNoteCounts_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->filter.Read(iprot);
				this->__isset.filter = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withTrash = iprot.ReadBool();
				this->__isset.withTrash = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNoteCounts_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNoteCounts_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.filter)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"filter");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->filter.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.withTrash)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withTrash");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withTrash);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::findNoteCounts_result::findNoteCounts_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::findNoteCounts_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::findNoteCounts_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"findNoteCounts_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNote_args::getNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withContent = iprot.ReadBool();
				this->__isset.withContent = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesData = iprot.ReadBool();
				this->__isset.withResourcesData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesRecognition = iprot.ReadBool();
				this->__isset.withResourcesRecognition = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesAlternateData = iprot.ReadBool();
				this->__isset.withResourcesAlternateData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.withContent)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withContent");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withContent);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesData);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesRecognition)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesRecognition");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesRecognition);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesAlternateData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesAlternateData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesAlternateData);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNote_result::getNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNoteContent_args::getNoteContent_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteContent_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteContent_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteContent_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNoteContent_result::getNoteContent_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteContent_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteContent_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteContent_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNoteSearchText_args::getNoteSearchText_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteSearchText_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->noteOnly = iprot.ReadBool();
				this->__isset.noteOnly = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->tokenizeForIndexing = iprot.ReadBool();
				this->__isset.tokenizeForIndexing = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteSearchText_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteSearchText_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteOnly)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteOnly");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->noteOnly);
		oprot.WriteFieldEnd();
	}
	if (__isset.tokenizeForIndexing)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tokenizeForIndexing");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->tokenizeForIndexing);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNoteSearchText_result::getNoteSearchText_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteSearchText_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteSearchText_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteSearchText_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceSearchText_args::getResourceSearchText_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceSearchText_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceSearchText_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceSearchText_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceSearchText_result::getResourceSearchText_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceSearchText_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceSearchText_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceSearchText_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNoteTagNames_args::getNoteTagNames_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteTagNames_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteTagNames_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteTagNames_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNoteTagNames_result::getNoteTagNames_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteTagNames_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list119;
					iprot.ReadListBegin(_list119);
					for (int _i120 = 0; _i120 < _list119.GetCount(); ++_i120)
					{
						Thrift::Protocol::TString _elem121;
						iprot.ReadString(_elem121);
						this->success.push_back(_elem121);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteTagNames_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteTagNames_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Thrift::Protocol::TString >::iterator _iter122(this->success.begin()), end(this->success.end()); _iter122 != end; ++_iter122)
			{
				oprot.WriteString((*_iter122));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createNote_args::createNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->note.Read(iprot);
				this->__isset.note = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.note)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"note");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->note.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createNote_result::createNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateNote_args::updateNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->note.Read(iprot);
				this->__isset.note = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.note)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"note");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->note.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateNote_result::updateNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::deleteNote_args::deleteNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::deleteNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::deleteNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"deleteNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::deleteNote_result::deleteNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::deleteNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::deleteNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"deleteNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeNote_args::expungeNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeNote_result::expungeNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeNotes_args::expungeNotes_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNotes_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list123;
					iprot.ReadListBegin(_list123);
					for (int _i124 = 0; _i124 < _list123.GetCount(); ++_i124)
					{
						Evernote::EDAM::Type::Guid _elem125;
						iprot.ReadString(_elem125);
						this->noteGuids.push_back(_elem125);
					}
					iprot.ReadListEnd();
				}
				this->__isset.noteGuids = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNotes_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNotes_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuids)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuids");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->noteGuids.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Guid >::iterator _iter126(this->noteGuids.begin()), end(this->noteGuids.end()); _iter126 != end; ++_iter126)
			{
				oprot.WriteString((*_iter126));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeNotes_result::expungeNotes_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeNotes_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeNotes_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeNotes_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeInactiveNotes_args::expungeInactiveNotes_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeInactiveNotes_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeInactiveNotes_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeInactiveNotes_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeInactiveNotes_result::expungeInactiveNotes_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeInactiveNotes_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeInactiveNotes_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeInactiveNotes_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::copyNote_args::copyNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::copyNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->noteGuid);
				this->__isset.noteGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->toNotebookGuid);
				this->__isset.toNotebookGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::copyNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"copyNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.toNotebookGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"toNotebookGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->toNotebookGuid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::copyNote_result::copyNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::copyNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::copyNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"copyNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listNoteVersions_args::listNoteVersions_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listNoteVersions_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->noteGuid);
				this->__isset.noteGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listNoteVersions_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listNoteVersions_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteGuid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listNoteVersions_result::listNoteVersions_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listNoteVersions_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list127;
					iprot.ReadListBegin(_list127);
					for (int _i128 = 0; _i128 < _list127.GetCount(); ++_i128)
					{
						NoteVersionId _elem129;
						_elem129.Read(iprot);
						this->success.push_back(_elem129);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listNoteVersions_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listNoteVersions_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<NoteVersionId >::iterator _iter130(this->success.begin()), end(this->success.end()); _iter130 != end; ++_iter130)
			{
				(*_iter130).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getNoteVersion_args::getNoteVersion_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteVersion_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->noteGuid);
				this->__isset.noteGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->updateSequenceNum = iprot.ReadI32();
				this->__isset.updateSequenceNum = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesData = iprot.ReadBool();
				this->__isset.withResourcesData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesRecognition = iprot.ReadBool();
				this->__isset.withResourcesRecognition = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withResourcesAlternateData = iprot.ReadBool();
				this->__isset.withResourcesAlternateData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteVersion_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteVersion_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.updateSequenceNum)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updateSequenceNum");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->updateSequenceNum);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesData);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesRecognition)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesRecognition");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesRecognition);
		oprot.WriteFieldEnd();
	}
	if (__isset.withResourcesAlternateData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withResourcesAlternateData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withResourcesAlternateData);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getNoteVersion_result::getNoteVersion_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getNoteVersion_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getNoteVersion_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getNoteVersion_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResource_args::getResource_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResource_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withData = iprot.ReadBool();
				this->__isset.withData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withRecognition = iprot.ReadBool();
				this->__isset.withRecognition = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withAttributes = iprot.ReadBool();
				this->__isset.withAttributes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withAlternateData = iprot.ReadBool();
				this->__isset.withAlternateData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResource_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResource_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.withData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withData);
		oprot.WriteFieldEnd();
	}
	if (__isset.withRecognition)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withRecognition");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withRecognition);
		oprot.WriteFieldEnd();
	}
	if (__isset.withAttributes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withAttributes");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withAttributes);
		oprot.WriteFieldEnd();
	}
	if (__isset.withAlternateData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withAlternateData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withAlternateData);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResource_result::getResource_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResource_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResource_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResource_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateResource_args::updateResource_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateResource_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->resource.Read(iprot);
				this->__isset.resource = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateResource_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateResource_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.resource)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"resource");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->resource.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateResource_result::updateResource_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateResource_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateResource_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateResource_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceData_args::getResourceData_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceData_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceData_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceData_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceData_result::getResourceData_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceData_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadBinary(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceData_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceData_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteBinary(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceByHash_args::getResourceByHash_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceByHash_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->noteGuid);
				this->__isset.noteGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadBinary(this->contentHash);
				this->__isset.contentHash = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withData = iprot.ReadBool();
				this->__isset.withData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withRecognition = iprot.ReadBool();
				this->__isset.withRecognition = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->withAlternateData = iprot.ReadBool();
				this->__isset.withAlternateData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceByHash_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceByHash_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.contentHash)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"contentHash");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteBinary(this->contentHash);
		oprot.WriteFieldEnd();
	}
	if (__isset.withData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withData);
		oprot.WriteFieldEnd();
	}
	if (__isset.withRecognition)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withRecognition");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withRecognition);
		oprot.WriteFieldEnd();
	}
	if (__isset.withAlternateData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"withAlternateData");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->withAlternateData);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceByHash_result::getResourceByHash_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceByHash_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceByHash_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceByHash_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceRecognition_args::getResourceRecognition_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceRecognition_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceRecognition_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceRecognition_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceRecognition_result::getResourceRecognition_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceRecognition_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadBinary(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceRecognition_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceRecognition_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteBinary(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceAlternateData_args::getResourceAlternateData_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceAlternateData_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceAlternateData_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceAlternateData_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceAlternateData_result::getResourceAlternateData_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceAlternateData_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadBinary(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceAlternateData_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceAlternateData_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteBinary(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getResourceAttributes_args::getResourceAttributes_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceAttributes_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceAttributes_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceAttributes_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getResourceAttributes_result::getResourceAttributes_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getResourceAttributes_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getResourceAttributes_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getResourceAttributes_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getAccountSize_args::getAccountSize_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getAccountSize_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getAccountSize_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getAccountSize_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getAccountSize_result::getAccountSize_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getAccountSize_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->success = iprot.ReadI64();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getAccountSize_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getAccountSize_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getAds_args::getAds_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getAds_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->adParameters.Read(iprot);
				this->__isset.adParameters = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getAds_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getAds_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.adParameters)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"adParameters");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->adParameters.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getAds_result::getAds_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getAds_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list131;
					iprot.ReadListBegin(_list131);
					for (int _i132 = 0; _i132 < _list131.GetCount(); ++_i132)
					{
						Evernote::EDAM::Type::Ad _elem133;
						_elem133.Read(iprot);
						this->success.push_back(_elem133);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getAds_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getAds_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Ad >::iterator _iter134(this->success.begin()), end(this->success.end()); _iter134 != end; ++_iter134)
			{
				(*_iter134).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getRandomAd_args::getRandomAd_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getRandomAd_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->adParameters.Read(iprot);
				this->__isset.adParameters = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getRandomAd_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getRandomAd_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.adParameters)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"adParameters");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->adParameters.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getRandomAd_result::getRandomAd_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getRandomAd_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getRandomAd_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getRandomAd_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getPublicNotebook_args::getPublicNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getPublicNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->userId = iprot.ReadI32();
				this->__isset.userId = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->publicUri);
				this->__isset.publicUri = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getPublicNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getPublicNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.userId)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userId");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->userId);
		oprot.WriteFieldEnd();
	}
	if (__isset.publicUri)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"publicUri");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->publicUri);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getPublicNotebook_result::getPublicNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getPublicNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getPublicNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getPublicNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createSharedNotebook_args::createSharedNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createSharedNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->sharedNotebook.Read(iprot);
				this->__isset.sharedNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createSharedNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createSharedNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.sharedNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sharedNotebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->sharedNotebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createSharedNotebook_result::createSharedNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createSharedNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createSharedNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createSharedNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listSharedNotebooks_args::listSharedNotebooks_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listSharedNotebooks_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listSharedNotebooks_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listSharedNotebooks_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listSharedNotebooks_result::listSharedNotebooks_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listSharedNotebooks_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list135;
					iprot.ReadListBegin(_list135);
					for (int _i136 = 0; _i136 < _list135.GetCount(); ++_i136)
					{
						Evernote::EDAM::Type::SharedNotebook _elem137;
						_elem137.Read(iprot);
						this->success.push_back(_elem137);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listSharedNotebooks_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listSharedNotebooks_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::SharedNotebook >::iterator _iter138(this->success.begin()), end(this->success.end()); _iter138 != end; ++_iter138)
			{
				(*_iter138).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeSharedNotebooks_args::expungeSharedNotebooks_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeSharedNotebooks_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list139;
					iprot.ReadListBegin(_list139);
					for (int _i140 = 0; _i140 < _list139.GetCount(); ++_i140)
					{
						__int64 _elem141 = 0;
						_elem141 = iprot.ReadI64();
						this->sharedNotebookIds.push_back(_elem141);
					}
					iprot.ReadListEnd();
				}
				this->__isset.sharedNotebookIds = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeSharedNotebooks_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeSharedNotebooks_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.sharedNotebookIds)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sharedNotebookIds");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeI64);
			list.SetCount(this->sharedNotebookIds.size());
			oprot.WriteListBegin(list);
			for (std::vector<__int64 >::iterator _iter142(this->sharedNotebookIds.begin()), end(this->sharedNotebookIds.end()); _iter142 != end; ++_iter142)
			{
				oprot.WriteI64((*_iter142));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeSharedNotebooks_result::expungeSharedNotebooks_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeSharedNotebooks_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeSharedNotebooks_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeSharedNotebooks_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::createLinkedNotebook_args::createLinkedNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createLinkedNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->linkedNotebook.Read(iprot);
				this->__isset.linkedNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createLinkedNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createLinkedNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.linkedNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"linkedNotebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->linkedNotebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::createLinkedNotebook_result::createLinkedNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::createLinkedNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::createLinkedNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"createLinkedNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::updateLinkedNotebook_args::updateLinkedNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateLinkedNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->linkedNotebook.Read(iprot);
				this->__isset.linkedNotebook = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateLinkedNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateLinkedNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.linkedNotebook)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"linkedNotebook");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->linkedNotebook.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::updateLinkedNotebook_result::updateLinkedNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::updateLinkedNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::updateLinkedNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"updateLinkedNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::listLinkedNotebooks_args::listLinkedNotebooks_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listLinkedNotebooks_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listLinkedNotebooks_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listLinkedNotebooks_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::listLinkedNotebooks_result::listLinkedNotebooks_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::listLinkedNotebooks_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list143;
					iprot.ReadListBegin(_list143);
					for (int _i144 = 0; _i144 < _list143.GetCount(); ++_i144)
					{
						Evernote::EDAM::Type::LinkedNotebook _elem145;
						_elem145.Read(iprot);
						this->success.push_back(_elem145);
					}
					iprot.ReadListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::listLinkedNotebooks_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"listLinkedNotebooks_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->success.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::LinkedNotebook >::iterator _iter146(this->success.begin()), end(this->success.end()); _iter146 != end; ++_iter146)
			{
				(*_iter146).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::expungeLinkedNotebook_args::expungeLinkedNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeLinkedNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeLinkedNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeLinkedNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::expungeLinkedNotebook_result::expungeLinkedNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::expungeLinkedNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->success = iprot.ReadI32();
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::expungeLinkedNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"expungeLinkedNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::authenticateToSharedNotebook_args::authenticateToSharedNotebook_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::authenticateToSharedNotebook_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->shareKey);
				this->__isset.shareKey = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::authenticateToSharedNotebook_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"authenticateToSharedNotebook_args");
	oprot.WriteStructBegin(struc);
	if (__isset.shareKey)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"shareKey");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->shareKey);
		oprot.WriteFieldEnd();
	}
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::authenticateToSharedNotebook_result::authenticateToSharedNotebook_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::authenticateToSharedNotebook_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::authenticateToSharedNotebook_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"authenticateToSharedNotebook_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::getSharedNotebookByAuth_args::getSharedNotebookByAuth_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSharedNotebookByAuth_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSharedNotebookByAuth_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSharedNotebookByAuth_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::getSharedNotebookByAuth_result::getSharedNotebookByAuth_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::getSharedNotebookByAuth_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::getSharedNotebookByAuth_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"getSharedNotebookByAuth_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::emailNote_args::emailNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::emailNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->parameters.Read(iprot);
				this->__isset.parameters = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::emailNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"emailNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.parameters)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"parameters");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->parameters.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::emailNote_result::emailNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::emailNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::emailNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"emailNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::shareNote_args::shareNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::shareNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::shareNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"shareNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::shareNote_result::shareNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::shareNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->success);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::shareNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"shareNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->success);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::stopSharingNote_args::stopSharingNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::stopSharingNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->authenticationToken);
				this->__isset.authenticationToken = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::stopSharingNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"stopSharingNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.authenticationToken)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"authenticationToken");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->authenticationToken);
		oprot.WriteFieldEnd();
	}
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::stopSharingNote_result::stopSharingNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::stopSharingNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::stopSharingNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"stopSharingNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
NoteStore::authenticateToSharedNote_args::authenticateToSharedNote_args()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::authenticateToSharedNote_args::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->noteKey);
				this->__isset.noteKey = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::authenticateToSharedNote_args::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"authenticateToSharedNote_args");
	oprot.WriteStructBegin(struc);
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteKey)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteKey");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteKey);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

NoteStore::authenticateToSharedNote_result::authenticateToSharedNote_result()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteStore::authenticateToSharedNote_result::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 0:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->success.Read(iprot);
				this->__isset.success = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->userException.Read(iprot);
				this->__isset.userException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->notFoundException.Read(iprot);
				this->__isset.notFoundException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->systemException.Read(iprot);
				this->__isset.systemException = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteStore::authenticateToSharedNote_result::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"authenticateToSharedNote_result");
	oprot.WriteStructBegin(struc);

	if (this->__isset.success)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"success");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(0);
		oprot.WriteFieldBegin(field);
		this->success.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.userException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"userException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		this->userException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.notFoundException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notFoundException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->notFoundException.Write(oprot);
		oprot.WriteFieldEnd();
	}
 else if (this->__isset.systemException)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"systemException");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->systemException.Write(oprot);
		oprot.WriteFieldEnd();
	}

	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}
