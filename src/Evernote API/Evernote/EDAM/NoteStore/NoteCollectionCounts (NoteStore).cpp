/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Types.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

NoteCollectionCounts::NoteCollectionCounts()
{
	memset(&__isset, 0, sizeof(Isset));
}

void NoteCollectionCounts::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeMap)
			{
				{
					Thrift::Protocol::TMap _map52;
					iprot.ReadMapBegin(_map52);
					for (int _i53 = 0; _i53 < _map52.GetCount(); ++_i53)
					{
						Evernote::EDAM::Types::Guid _key54;
						__int32 _val55;
						_key54;
						iprot.ReadString(_key54);
						_val55 = iprot.ReadI32();
						this->notebookCounts[_key54] = _val55;
					}
					iprot.ReadMapEnd();
				}
				this->__isset.notebookCounts = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeMap)
			{
				{
					Thrift::Protocol::TMap _map56;
					iprot.ReadMapBegin(_map56);
					for (int _i57 = 0; _i57 < _map56.GetCount(); ++_i57)
					{
						Evernote::EDAM::Types::Guid _key58;
						__int32 _val59;
						_key58;
						iprot.ReadString(_key58);
						_val59 = iprot.ReadI32();
						this->tagCounts[_key58] = _val59;
					}
					iprot.ReadMapEnd();
				}
				this->__isset.tagCounts = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->trashCount = iprot.ReadI32();
				this->__isset.trashCount = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteCollectionCounts::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"NoteCollectionCounts");
	oprot.WriteStructBegin(struc);
	if (__isset.notebookCounts)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebookCounts");
		field.SetType(Thrift::Protocol::TypeMap);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TMap map;
			map.SetKeyType(Thrift::Protocol::TypeString);
			map.SetValueType(Thrift::Protocol::TypeI32);
			map.SetCount(this->notebookCounts.size());
			oprot.WriteMapBegin(map);
			for (std::map<Evernote::EDAM::Types::Guid, __int32 >::iterator _iter60(this->notebookCounts.begin()), end(this->notebookCounts.end()); _iter60 != end; ++_iter60)
			{
				oprot.WriteString(_iter60->first);
				oprot.WriteI32(_iter60->second);
				oprot.WriteMapEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.tagCounts)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tagCounts");
		field.SetType(Thrift::Protocol::TypeMap);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TMap map;
			map.SetKeyType(Thrift::Protocol::TypeString);
			map.SetValueType(Thrift::Protocol::TypeI32);
			map.SetCount(this->tagCounts.size());
			oprot.WriteMapBegin(map);
			for (std::map<Evernote::EDAM::Types::Guid, __int32 >::iterator _iter61(this->tagCounts.begin()), end(this->tagCounts.end()); _iter61 != end; ++_iter61)
			{
				oprot.WriteString(_iter61->first);
				oprot.WriteI32(_iter61->second);
				oprot.WriteMapEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.trashCount)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"trashCount");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->trashCount);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

