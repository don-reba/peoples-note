#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace NoteStore
{

class SyncChunk
{
public:

	struct Isset
	{
		bool chunkHighUSN;
		bool notes;
		bool notebooks;
		bool tags;
		bool searches;
		bool resources;
		bool expungedNotes;
		bool expungedNotebooks;
		bool expungedTags;
		bool expungedSearches;
		bool linkedNotebooks;
		bool expungedLinkedNotebooks;
	};

	Evernote::EDAM::Type::Timestamp currentTime;
	__int32 chunkHighUSN;
	__int32 updateCount;
	std::vector<Evernote::EDAM::Type::Note > notes;
	std::vector<Evernote::EDAM::Type::Notebook > notebooks;
	std::vector<Evernote::EDAM::Type::Tag > tags;
	std::vector<Evernote::EDAM::Type::SavedSearch > searches;
	std::vector<Evernote::EDAM::Type::Resource > resources;
	std::vector<Evernote::EDAM::Type::Guid > expungedNotes;
	std::vector<Evernote::EDAM::Type::Guid > expungedNotebooks;
	std::vector<Evernote::EDAM::Type::Guid > expungedTags;
	std::vector<Evernote::EDAM::Type::Guid > expungedSearches;
	std::vector<Evernote::EDAM::Type::LinkedNotebook > linkedNotebooks;
	std::vector<Evernote::EDAM::Type::Guid > expungedLinkedNotebooks;

	Isset __isset;

	SyncChunk();
	virtual ~SyncChunk() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // NoteStore
} // EDAM
} // Evernote
