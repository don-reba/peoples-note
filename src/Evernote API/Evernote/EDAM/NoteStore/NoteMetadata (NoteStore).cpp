/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

NoteMetadata::NoteMetadata()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteMetadata::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->title);
				this->__isset.title = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->contentLength = iprot.ReadI32();
				this->__isset.contentLength = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->created = iprot.ReadI64();
				this->__isset.created = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->updated = iprot.ReadI64();
				this->__isset.updated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->updateSequenceNum = iprot.ReadI32();
				this->__isset.updateSequenceNum = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->notebookGuid);
				this->__isset.notebookGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list60;
					iprot.ReadListBegin(_list60);
					for (int _i61 = 0; _i61 < _list60.GetCount(); ++_i61)
					{
						Evernote::EDAM::Type::Guid _elem62;
						iprot.ReadString(_elem62);
						this->tagGuids.push_back(_elem62);
					}
					iprot.ReadListEnd();
				}
				this->__isset.tagGuids = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 14:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->attributes.Read(iprot);
				this->__isset.attributes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 20:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->largestResourceMime);
				this->__isset.largestResourceMime = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 21:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->largestResourceSize = iprot.ReadI32();
				this->__isset.largestResourceSize = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteMetadata::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"NoteMetadata");
	oprot.WriteStructBegin(struc);
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.title)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"title");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->title);
		oprot.WriteFieldEnd();
	}
	if (__isset.contentLength)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"contentLength");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->contentLength);
		oprot.WriteFieldEnd();
	}
	if (__isset.created)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"created");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->created);
		oprot.WriteFieldEnd();
	}
	if (__isset.updated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updated");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->updated);
		oprot.WriteFieldEnd();
	}
	if (__isset.updateSequenceNum)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updateSequenceNum");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->updateSequenceNum);
		oprot.WriteFieldEnd();
	}
	if (__isset.notebookGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebookGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->notebookGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.tagGuids)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tagGuids");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->tagGuids.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Guid >::iterator _iter63(this->tagGuids.begin()), end(this->tagGuids.end()); _iter63 != end; ++_iter63)
			{
				oprot.WriteString((*_iter63));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.attributes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"attributes");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(14);
		oprot.WriteFieldBegin(field);
		this->attributes.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.largestResourceMime)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"largestResourceMime");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(20);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->largestResourceMime);
		oprot.WriteFieldEnd();
	}
	if (__isset.largestResourceSize)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"largestResourceSize");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(21);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->largestResourceSize);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

