/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

NoteEmailParameters::NoteEmailParameters()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteEmailParameters::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->note.Read(iprot);
				this->__isset.note = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list95;
					iprot.ReadListBegin(_list95);
					for (int _i96 = 0; _i96 < _list95.GetCount(); ++_i96)
					{
						Thrift::Protocol::TString _elem97;
						iprot.ReadString(_elem97);
						this->toAddresses.push_back(_elem97);
					}
					iprot.ReadListEnd();
				}
				this->__isset.toAddresses = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list98;
					iprot.ReadListBegin(_list98);
					for (int _i99 = 0; _i99 < _list98.GetCount(); ++_i99)
					{
						Thrift::Protocol::TString _elem100;
						iprot.ReadString(_elem100);
						this->ccAddresses.push_back(_elem100);
					}
					iprot.ReadListEnd();
				}
				this->__isset.ccAddresses = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->subject);
				this->__isset.subject = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->message);
				this->__isset.message = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteEmailParameters::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"NoteEmailParameters");
	oprot.WriteStructBegin(struc);
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.note)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"note");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		this->note.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.toAddresses)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"toAddresses");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->toAddresses.size());
			oprot.WriteListBegin(list);
			for (std::vector<Thrift::Protocol::TString >::iterator _iter101(this->toAddresses.begin()), end(this->toAddresses.end()); _iter101 != end; ++_iter101)
			{
				oprot.WriteString((*_iter101));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.ccAddresses)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"ccAddresses");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->ccAddresses.size());
			oprot.WriteListBegin(list);
			for (std::vector<Thrift::Protocol::TString >::iterator _iter102(this->ccAddresses.begin()), end(this->ccAddresses.end()); _iter102 != end; ++_iter102)
			{
				oprot.WriteString((*_iter102));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.subject)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"subject");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->subject);
		oprot.WriteFieldEnd();
	}
	if (__isset.message)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"message");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->message);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

