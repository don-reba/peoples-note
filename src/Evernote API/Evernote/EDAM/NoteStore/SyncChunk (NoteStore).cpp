/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Types.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

SyncChunk::SyncChunk()
{
	memset(&__isset, 0, sizeof(Isset));
}

void SyncChunk::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->currentTime = iprot.ReadI64();
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->chunkHighUSN = iprot.ReadI32();
				this->__isset.chunkHighUSN = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->updateCount = iprot.ReadI32();
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list0;
					iprot.ReadListBegin(_list0);
					for (int _i1 = 0; _i1 < _list0.GetCount(); ++_i1)
					{
						Evernote::EDAM::Types::Note _elem2;
						_elem2.Read(iprot);
						this->notes.push_back(_elem2);
					}
					iprot.ReadListEnd();
				}
				this->__isset.notes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list3;
					iprot.ReadListBegin(_list3);
					for (int _i4 = 0; _i4 < _list3.GetCount(); ++_i4)
					{
						Evernote::EDAM::Types::Notebook _elem5;
						_elem5.Read(iprot);
						this->notebooks.push_back(_elem5);
					}
					iprot.ReadListEnd();
				}
				this->__isset.notebooks = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list6;
					iprot.ReadListBegin(_list6);
					for (int _i7 = 0; _i7 < _list6.GetCount(); ++_i7)
					{
						Evernote::EDAM::Types::Tag _elem8;
						_elem8.Read(iprot);
						this->tags.push_back(_elem8);
					}
					iprot.ReadListEnd();
				}
				this->__isset.tags = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list9;
					iprot.ReadListBegin(_list9);
					for (int _i10 = 0; _i10 < _list9.GetCount(); ++_i10)
					{
						Evernote::EDAM::Types::SavedSearch _elem11;
						_elem11.Read(iprot);
						this->searches.push_back(_elem11);
					}
					iprot.ReadListEnd();
				}
				this->__isset.searches = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list12;
					iprot.ReadListBegin(_list12);
					for (int _i13 = 0; _i13 < _list12.GetCount(); ++_i13)
					{
						Evernote::EDAM::Types::Resource _elem14;
						_elem14.Read(iprot);
						this->resources.push_back(_elem14);
					}
					iprot.ReadListEnd();
				}
				this->__isset.resources = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list15;
					iprot.ReadListBegin(_list15);
					for (int _i16 = 0; _i16 < _list15.GetCount(); ++_i16)
					{
						Evernote::EDAM::Types::Guid _elem17;
						_elem17;
						iprot.ReadString(_elem17);
						this->expungedNotes.push_back(_elem17);
					}
					iprot.ReadListEnd();
				}
				this->__isset.expungedNotes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list18;
					iprot.ReadListBegin(_list18);
					for (int _i19 = 0; _i19 < _list18.GetCount(); ++_i19)
					{
						Evernote::EDAM::Types::Guid _elem20;
						_elem20;
						iprot.ReadString(_elem20);
						this->expungedNotebooks.push_back(_elem20);
					}
					iprot.ReadListEnd();
				}
				this->__isset.expungedNotebooks = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list21;
					iprot.ReadListBegin(_list21);
					for (int _i22 = 0; _i22 < _list21.GetCount(); ++_i22)
					{
						Evernote::EDAM::Types::Guid _elem23;
						_elem23;
						iprot.ReadString(_elem23);
						this->expungedTags.push_back(_elem23);
					}
					iprot.ReadListEnd();
				}
				this->__isset.expungedTags = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list24;
					iprot.ReadListBegin(_list24);
					for (int _i25 = 0; _i25 < _list24.GetCount(); ++_i25)
					{
						Evernote::EDAM::Types::Guid _elem26;
						_elem26;
						iprot.ReadString(_elem26);
						this->expungedSearches.push_back(_elem26);
					}
					iprot.ReadListEnd();
				}
				this->__isset.expungedSearches = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void SyncChunk::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"SyncChunk");
	oprot.WriteStructBegin(struc);
	{
		Thrift::Protocol::TField field;
		field.SetName(L"currentTime");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->currentTime);
		oprot.WriteFieldEnd();
	}
	if (__isset.chunkHighUSN)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"chunkHighUSN");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->chunkHighUSN);
		oprot.WriteFieldEnd();
	}
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updateCount");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->updateCount);
		oprot.WriteFieldEnd();
	}
	if (__isset.notes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notes");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->notes.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Note >::iterator _iter27(this->notes.begin()), end(this->notes.end()); _iter27 != end; ++_iter27)
			{
				(*_iter27).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.notebooks)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebooks");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->notebooks.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Notebook >::iterator _iter28(this->notebooks.begin()), end(this->notebooks.end()); _iter28 != end; ++_iter28)
			{
				(*_iter28).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.tags)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tags");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->tags.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Tag >::iterator _iter29(this->tags.begin()), end(this->tags.end()); _iter29 != end; ++_iter29)
			{
				(*_iter29).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.searches)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"searches");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->searches.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::SavedSearch >::iterator _iter30(this->searches.begin()), end(this->searches.end()); _iter30 != end; ++_iter30)
			{
				(*_iter30).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.resources)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"resources");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeStruct);
			list.SetCount(this->resources.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Resource >::iterator _iter31(this->resources.begin()), end(this->resources.end()); _iter31 != end; ++_iter31)
			{
				(*_iter31).Write(oprot);
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.expungedNotes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"expungedNotes");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->expungedNotes.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Guid >::iterator _iter32(this->expungedNotes.begin()), end(this->expungedNotes.end()); _iter32 != end; ++_iter32)
			{
				oprot.WriteString((*_iter32));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.expungedNotebooks)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"expungedNotebooks");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->expungedNotebooks.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Guid >::iterator _iter33(this->expungedNotebooks.begin()), end(this->expungedNotebooks.end()); _iter33 != end; ++_iter33)
			{
				oprot.WriteString((*_iter33));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.expungedTags)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"expungedTags");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->expungedTags.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Guid >::iterator _iter34(this->expungedTags.begin()), end(this->expungedTags.end()); _iter34 != end; ++_iter34)
			{
				oprot.WriteString((*_iter34));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.expungedSearches)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"expungedSearches");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->expungedSearches.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Types::Guid >::iterator _iter35(this->expungedSearches.begin()), end(this->expungedSearches.end()); _iter35 != end; ++_iter35)
			{
				oprot.WriteString((*_iter35));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

