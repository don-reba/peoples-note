/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

NoteFilter::NoteFilter()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NoteFilter::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->order = iprot.ReadI32();
				this->__isset.order = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->ascending = iprot.ReadBool();
				this->__isset.ascending = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->words);
				this->__isset.words = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->notebookGuid);
				this->__isset.notebookGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list44;
					iprot.ReadListBegin(_list44);
					for (int _i45 = 0; _i45 < _list44.GetCount(); ++_i45)
					{
						Evernote::EDAM::Type::Guid _elem46;
						iprot.ReadString(_elem46);
						this->tagGuids.push_back(_elem46);
					}
					iprot.ReadListEnd();
				}
				this->__isset.tagGuids = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				iprot.ReadString(this->timeZone);
				this->__isset.timeZone = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->inactive = iprot.ReadBool();
				this->__isset.inactive = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NoteFilter::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"NoteFilter");
	oprot.WriteStructBegin(struc);
	if (__isset.order)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"order");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->order);
		oprot.WriteFieldEnd();
	}
	if (__isset.ascending)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"ascending");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->ascending);
		oprot.WriteFieldEnd();
	}
	if (__isset.words)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"words");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->words);
		oprot.WriteFieldEnd();
	}
	if (__isset.notebookGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"notebookGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->notebookGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.tagGuids)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"tagGuids");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->tagGuids.size());
			oprot.WriteListBegin(list);
			for (std::vector<Evernote::EDAM::Type::Guid >::iterator _iter47(this->tagGuids.begin()), end(this->tagGuids.end()); _iter47 != end; ++_iter47)
			{
				oprot.WriteString((*_iter47));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.timeZone)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"timeZone");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->timeZone);
		oprot.WriteFieldEnd();
	}
	if (__isset.inactive)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"inactive");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->inactive);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

