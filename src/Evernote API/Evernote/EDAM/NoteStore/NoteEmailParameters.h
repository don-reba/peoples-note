#pragma once

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>


namespace Evernote
{
namespace EDAM
{
namespace NoteStore
{

class NoteEmailParameters
{
public:

	struct Isset
	{
		bool guid;
		bool note;
		bool toAddresses;
		bool ccAddresses;
		bool subject;
		bool message;
	};

	Thrift::Protocol::TString guid;
	Evernote::EDAM::Type::Note note;
	std::vector<Thrift::Protocol::TString > toAddresses;
	std::vector<Thrift::Protocol::TString > ccAddresses;
	Thrift::Protocol::TString subject;
	Thrift::Protocol::TString message;

	Isset __isset;

	NoteEmailParameters();
	virtual ~NoteEmailParameters() throw() {}

	void Read(Thrift::Protocol::TProtocol & iprot);
	void Write(Thrift::Protocol::TProtocol & oprot);
};
} // NoteStore
} // EDAM
} // Evernote
