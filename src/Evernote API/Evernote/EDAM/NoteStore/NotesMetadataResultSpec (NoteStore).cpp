/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../NoteStore.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/UserStore.h>
#include <Evernote/EDAM/Type.h>
#include <Evernote/EDAM/Error.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::NoteStore;

NotesMetadataResultSpec::NotesMetadataResultSpec()
{
	::ZeroMemory(&__isset, sizeof(Isset));
}

void NotesMetadataResultSpec::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeTitle = iprot.ReadBool();
				this->__isset.includeTitle = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeContentLength = iprot.ReadBool();
				this->__isset.includeContentLength = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeCreated = iprot.ReadBool();
				this->__isset.includeCreated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeUpdated = iprot.ReadBool();
				this->__isset.includeUpdated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeUpdateSequenceNum = iprot.ReadBool();
				this->__isset.includeUpdateSequenceNum = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeNotebookGuid = iprot.ReadBool();
				this->__isset.includeNotebookGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeTagGuids = iprot.ReadBool();
				this->__isset.includeTagGuids = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 14:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeAttributes = iprot.ReadBool();
				this->__isset.includeAttributes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 20:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeLargestResourceMime = iprot.ReadBool();
				this->__isset.includeLargestResourceMime = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 21:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->includeLargestResourceSize = iprot.ReadBool();
				this->__isset.includeLargestResourceSize = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void NotesMetadataResultSpec::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"NotesMetadataResultSpec");
	oprot.WriteStructBegin(struc);
	if (__isset.includeTitle)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeTitle");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeTitle);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeContentLength)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeContentLength");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeContentLength);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeCreated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeCreated");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeCreated);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeUpdated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeUpdated");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeUpdated);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeUpdateSequenceNum)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeUpdateSequenceNum");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeUpdateSequenceNum);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeNotebookGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeNotebookGuid");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeNotebookGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeTagGuids)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeTagGuids");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeTagGuids);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeAttributes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeAttributes");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(14);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeAttributes);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeLargestResourceMime)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeLargestResourceMime");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(20);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeLargestResourceMime);
		oprot.WriteFieldEnd();
	}
	if (__isset.includeLargestResourceSize)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"includeLargestResourceSize");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(21);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->includeLargestResourceSize);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

