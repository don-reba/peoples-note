/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Types.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Types;

UserAttributes::UserAttributes()
{
	memset(&__isset, 0, sizeof(Isset));
}

void UserAttributes::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->defaultLocationName;
				iprot.ReadString(this->defaultLocationName);
				this->__isset.defaultLocationName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->defaultLatitude = iprot.ReadDouble();
				this->__isset.defaultLatitude = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeDouble)
			{
				this->defaultLongitude = iprot.ReadDouble();
				this->__isset.defaultLongitude = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->preactivation = iprot.ReadBool();
				this->__isset.preactivation = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list0;
					iprot.ReadListBegin(_list0);
					for (int _i1 = 0; _i1 < _list0.GetCount(); ++_i1)
					{
						Thrift::Protocol::TString _elem2;
						_elem2;
						iprot.ReadString(_elem2);
						this->viewedPromotions.push_back(_elem2);
					}
					iprot.ReadListEnd();
				}
				this->__isset.viewedPromotions = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->incomingEmailAddress;
				iprot.ReadString(this->incomingEmailAddress);
				this->__isset.incomingEmailAddress = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeList)
			{
				{
					Thrift::Protocol::TList _list3;
					iprot.ReadListBegin(_list3);
					for (int _i4 = 0; _i4 < _list3.GetCount(); ++_i4)
					{
						Thrift::Protocol::TString _elem5;
						_elem5;
						iprot.ReadString(_elem5);
						this->recentMailedAddresses.push_back(_elem5);
					}
					iprot.ReadListEnd();
				}
				this->__isset.recentMailedAddresses = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->comments;
				iprot.ReadString(this->comments);
				this->__isset.comments = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->dateAgreedToTermsOfService = iprot.ReadI64();
				this->__isset.dateAgreedToTermsOfService = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->maxReferrals = iprot.ReadI32();
				this->__isset.maxReferrals = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->referralCount = iprot.ReadI32();
				this->__isset.referralCount = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 14:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->refererCode;
				iprot.ReadString(this->refererCode);
				this->__isset.refererCode = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 15:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->sentEmailDate = iprot.ReadI64();
				this->__isset.sentEmailDate = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 16:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->sentEmailCount = iprot.ReadI32();
				this->__isset.sentEmailCount = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 17:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->dailyEmailLimit = iprot.ReadI32();
				this->__isset.dailyEmailLimit = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 18:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->emailOptOutDate = iprot.ReadI64();
				this->__isset.emailOptOutDate = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 19:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->partnerEmailOptInDate = iprot.ReadI64();
				this->__isset.partnerEmailOptInDate = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 20:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->preferredLanguage;
				iprot.ReadString(this->preferredLanguage);
				this->__isset.preferredLanguage = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 21:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->preferredCountry;
				iprot.ReadString(this->preferredCountry);
				this->__isset.preferredCountry = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 22:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->clipFullPage = iprot.ReadBool();
				this->__isset.clipFullPage = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 23:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->twitterUserName;
				iprot.ReadString(this->twitterUserName);
				this->__isset.twitterUserName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 24:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->twitterId;
				iprot.ReadString(this->twitterId);
				this->__isset.twitterId = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 25:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->groupName;
				iprot.ReadString(this->groupName);
				this->__isset.groupName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 26:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->recognitionLanguage;
				iprot.ReadString(this->recognitionLanguage);
				this->__isset.recognitionLanguage = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 27:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->customerProfileId = iprot.ReadI64();
				this->__isset.customerProfileId = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 28:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->referralProof;
				iprot.ReadString(this->referralProof);
				this->__isset.referralProof = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void UserAttributes::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"UserAttributes");
	oprot.WriteStructBegin(struc);
	if (__isset.defaultLocationName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"defaultLocationName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->defaultLocationName);
		oprot.WriteFieldEnd();
	}
	if (__isset.defaultLatitude)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"defaultLatitude");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->defaultLatitude);
		oprot.WriteFieldEnd();
	}
	if (__isset.defaultLongitude)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"defaultLongitude");
		field.SetType(Thrift::Protocol::TypeDouble);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteDouble(this->defaultLongitude);
		oprot.WriteFieldEnd();
	}
	if (__isset.preactivation)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"preactivation");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->preactivation);
		oprot.WriteFieldEnd();
	}
	if (__isset.viewedPromotions)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"viewedPromotions");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->viewedPromotions.size());
			oprot.WriteListBegin(list);
			for (std::vector<Thrift::Protocol::TString >::iterator _iter6(this->viewedPromotions.begin()), end(this->viewedPromotions.end()); _iter6 != end; ++_iter6)
			{
				oprot.WriteString((*_iter6));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.incomingEmailAddress)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"incomingEmailAddress");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->incomingEmailAddress);
		oprot.WriteFieldEnd();
	}
	if (__isset.recentMailedAddresses)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"recentMailedAddresses");
		field.SetType(Thrift::Protocol::TypeList);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		{
			Thrift::Protocol::TList list;
			list.SetElementType(Thrift::Protocol::TypeString);
			list.SetCount(this->recentMailedAddresses.size());
			oprot.WriteListBegin(list);
			for (std::vector<Thrift::Protocol::TString >::iterator _iter7(this->recentMailedAddresses.begin()), end(this->recentMailedAddresses.end()); _iter7 != end; ++_iter7)
			{
				oprot.WriteString((*_iter7));
				oprot.WriteListEnd();
			}
		}
		oprot.WriteFieldEnd();
	}
	if (__isset.comments)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"comments");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->comments);
		oprot.WriteFieldEnd();
	}
	if (__isset.dateAgreedToTermsOfService)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"dateAgreedToTermsOfService");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->dateAgreedToTermsOfService);
		oprot.WriteFieldEnd();
	}
	if (__isset.maxReferrals)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"maxReferrals");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->maxReferrals);
		oprot.WriteFieldEnd();
	}
	if (__isset.referralCount)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"referralCount");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->referralCount);
		oprot.WriteFieldEnd();
	}
	if (__isset.refererCode)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"refererCode");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(14);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->refererCode);
		oprot.WriteFieldEnd();
	}
	if (__isset.sentEmailDate)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sentEmailDate");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(15);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->sentEmailDate);
		oprot.WriteFieldEnd();
	}
	if (__isset.sentEmailCount)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"sentEmailCount");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(16);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->sentEmailCount);
		oprot.WriteFieldEnd();
	}
	if (__isset.dailyEmailLimit)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"dailyEmailLimit");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(17);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->dailyEmailLimit);
		oprot.WriteFieldEnd();
	}
	if (__isset.emailOptOutDate)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"emailOptOutDate");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(18);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->emailOptOutDate);
		oprot.WriteFieldEnd();
	}
	if (__isset.partnerEmailOptInDate)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"partnerEmailOptInDate");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(19);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->partnerEmailOptInDate);
		oprot.WriteFieldEnd();
	}
	if (__isset.preferredLanguage)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"preferredLanguage");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(20);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->preferredLanguage);
		oprot.WriteFieldEnd();
	}
	if (__isset.preferredCountry)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"preferredCountry");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(21);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->preferredCountry);
		oprot.WriteFieldEnd();
	}
	if (__isset.clipFullPage)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"clipFullPage");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(22);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->clipFullPage);
		oprot.WriteFieldEnd();
	}
	if (__isset.twitterUserName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"twitterUserName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(23);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->twitterUserName);
		oprot.WriteFieldEnd();
	}
	if (__isset.twitterId)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"twitterId");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(24);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->twitterId);
		oprot.WriteFieldEnd();
	}
	if (__isset.groupName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"groupName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(25);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->groupName);
		oprot.WriteFieldEnd();
	}
	if (__isset.recognitionLanguage)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"recognitionLanguage");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(26);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->recognitionLanguage);
		oprot.WriteFieldEnd();
	}
	if (__isset.customerProfileId)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"customerProfileId");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(27);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->customerProfileId);
		oprot.WriteFieldEnd();
	}
	if (__isset.referralProof)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"referralProof");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(28);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->referralProof);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

