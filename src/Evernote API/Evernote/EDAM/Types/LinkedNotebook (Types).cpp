/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Types.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Types;

LinkedNotebook::LinkedNotebook()
{
	memset(&__isset, 0, sizeof(Isset));
}

void LinkedNotebook::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->id = iprot.ReadI64();
				this->__isset.id = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->shareName;
				iprot.ReadString(this->shareName);
				this->__isset.shareName = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->username;
				iprot.ReadString(this->username);
				this->__isset.username = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->shardId;
				iprot.ReadString(this->shardId);
				this->__isset.shardId = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->shareKey;
				iprot.ReadString(this->shareKey);
				this->__isset.shareKey = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->uri;
				iprot.ReadString(this->uri);
				this->__isset.uri = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void LinkedNotebook::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"LinkedNotebook");
	oprot.WriteStructBegin(struc);
	if (__isset.id)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"id");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->id);
		oprot.WriteFieldEnd();
	}
	if (__isset.shareName)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"shareName");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->shareName);
		oprot.WriteFieldEnd();
	}
	if (__isset.username)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"username");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->username);
		oprot.WriteFieldEnd();
	}
	if (__isset.shardId)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"shardId");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->shardId);
		oprot.WriteFieldEnd();
	}
	if (__isset.shareKey)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"shareKey");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->shareKey);
		oprot.WriteFieldEnd();
	}
	if (__isset.uri)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"uri");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->uri);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

