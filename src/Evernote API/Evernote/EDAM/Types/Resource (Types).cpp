/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Types.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Types;

Resource::Resource()
{
	memset(&__isset, 0, sizeof(Isset));
}

void Resource::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->guid;
				iprot.ReadString(this->guid);
				this->__isset.guid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->noteGuid;
				iprot.ReadString(this->noteGuid);
				this->__isset.noteGuid = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->data.Read(iprot);
				this->__isset.data = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->mime;
				iprot.ReadString(this->mime);
				this->__isset.mime = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->width = iprot.ReadI16();
				this->__isset.width = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->height = iprot.ReadI16();
				this->__isset.height = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI16)
			{
				this->duration = iprot.ReadI16();
				this->__isset.duration = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeBool)
			{
				this->active = iprot.ReadBool();
				this->__isset.active = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->recognition.Read(iprot);
				this->__isset.recognition = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->attributes.Read(iprot);
				this->__isset.attributes = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->updateSequenceNum = iprot.ReadI32();
				this->__isset.updateSequenceNum = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeStruct)
			{
				this->alternateData.Read(iprot);
				this->__isset.alternateData = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void Resource::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"Resource");
	oprot.WriteStructBegin(struc);
	if (__isset.guid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"guid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->guid);
		oprot.WriteFieldEnd();
	}
	if (__isset.noteGuid)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"noteGuid");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->noteGuid);
		oprot.WriteFieldEnd();
	}
	if (__isset.data)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"data");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		this->data.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.mime)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"mime");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->mime);
		oprot.WriteFieldEnd();
	}
	if (__isset.width)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"width");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->width);
		oprot.WriteFieldEnd();
	}
	if (__isset.height)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"height");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->height);
		oprot.WriteFieldEnd();
	}
	if (__isset.duration)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"duration");
		field.SetType(Thrift::Protocol::TypeI16);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI16(this->duration);
		oprot.WriteFieldEnd();
	}
	if (__isset.active)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"active");
		field.SetType(Thrift::Protocol::TypeBool);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		oprot.WriteBool(this->active);
		oprot.WriteFieldEnd();
	}
	if (__isset.recognition)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"recognition");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		this->recognition.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.attributes)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"attributes");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		this->attributes.Write(oprot);
		oprot.WriteFieldEnd();
	}
	if (__isset.updateSequenceNum)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updateSequenceNum");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32(this->updateSequenceNum);
		oprot.WriteFieldEnd();
	}
	if (__isset.alternateData)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"alternateData");
		field.SetType(Thrift::Protocol::TypeStruct);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		this->alternateData.Write(oprot);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

