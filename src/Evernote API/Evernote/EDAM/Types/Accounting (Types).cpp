/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#include "../Types.h"
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <Thrift/Thrift.h>
#include <Thrift/Protocol.h>
#include <Thrift/Transport.h>
#include <Evernote/EDAM/Limits.h>

using namespace Evernote::EDAM::Types;

Accounting::Accounting()
{
	memset(&__isset, 0, sizeof(Isset));
}

void Accounting::Read(Thrift::Protocol::TProtocol & iprot)
{
	Thrift::Protocol::TStruct struc;
	iprot.ReadStructBegin(struc);
	for (;;)
	{
		Thrift::Protocol::TField field;
		iprot.ReadFieldBegin(field);
		if (field.GetType() == Thrift::Protocol::TypeStop)
			break;
		switch (field.GetID())
		{
		case 1:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->uploadLimit = iprot.ReadI64();
				this->__isset.uploadLimit = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 2:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->uploadLimitEnd = iprot.ReadI64();
				this->__isset.uploadLimitEnd = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 3:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->uploadLimitNextMonth = iprot.ReadI64();
				this->__isset.uploadLimitNextMonth = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 4:
			if (field.GetType() == Thrift::Protocol::TypeI32)
			{
				this->premiumServiceStatus = (const PremiumOrderStatus)iprot.ReadI32();
				this->__isset.premiumServiceStatus = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 5:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->premiumOrderNumber;
				iprot.ReadString(this->premiumOrderNumber);
				this->__isset.premiumOrderNumber = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 6:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->premiumCommerceService;
				iprot.ReadString(this->premiumCommerceService);
				this->__isset.premiumCommerceService = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 7:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->premiumServiceStart = iprot.ReadI64();
				this->__isset.premiumServiceStart = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 8:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->premiumServiceSKU;
				iprot.ReadString(this->premiumServiceSKU);
				this->__isset.premiumServiceSKU = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 9:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->lastSuccessfulCharge = iprot.ReadI64();
				this->__isset.lastSuccessfulCharge = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 10:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->lastFailedCharge = iprot.ReadI64();
				this->__isset.lastFailedCharge = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 11:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->lastFailedChargeReason;
				iprot.ReadString(this->lastFailedChargeReason);
				this->__isset.lastFailedChargeReason = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 12:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->nextPaymentDue = iprot.ReadI64();
				this->__isset.nextPaymentDue = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 13:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->premiumLockUntil = iprot.ReadI64();
				this->__isset.premiumLockUntil = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 14:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->updated = iprot.ReadI64();
				this->__isset.updated = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 16:
			if (field.GetType() == Thrift::Protocol::TypeString)
			{
				this->premiumSubscriptionNumber;
				iprot.ReadString(this->premiumSubscriptionNumber);
				this->__isset.premiumSubscriptionNumber = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		case 17:
			if (field.GetType() == Thrift::Protocol::TypeI64)
			{
				this->lastRequestedCharge = iprot.ReadI64();
				this->__isset.lastRequestedCharge = true;
			}
			else
			{
				Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			}
			break;
		default: 
			Thrift::Protocol::TProtocolUtil::Skip(iprot, field.GetType());
			break;
		}
		iprot.ReadFieldEnd();
	}
	iprot.ReadStructEnd();
}

void Accounting::Write(Thrift::Protocol::TProtocol & oprot)
{
	Thrift::Protocol::TStruct struc;
	struc.SetName(L"Accounting");
	oprot.WriteStructBegin(struc);
	if (__isset.uploadLimit)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"uploadLimit");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(1);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->uploadLimit);
		oprot.WriteFieldEnd();
	}
	if (__isset.uploadLimitEnd)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"uploadLimitEnd");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(2);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->uploadLimitEnd);
		oprot.WriteFieldEnd();
	}
	if (__isset.uploadLimitNextMonth)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"uploadLimitNextMonth");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(3);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->uploadLimitNextMonth);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumServiceStatus)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumServiceStatus");
		field.SetType(Thrift::Protocol::TypeI32);
		field.SetID(4);
		oprot.WriteFieldBegin(field);
		oprot.WriteI32((int)this->premiumServiceStatus);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumOrderNumber)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumOrderNumber");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(5);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->premiumOrderNumber);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumCommerceService)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumCommerceService");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(6);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->premiumCommerceService);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumServiceStart)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumServiceStart");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(7);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->premiumServiceStart);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumServiceSKU)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumServiceSKU");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(8);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->premiumServiceSKU);
		oprot.WriteFieldEnd();
	}
	if (__isset.lastSuccessfulCharge)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"lastSuccessfulCharge");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(9);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->lastSuccessfulCharge);
		oprot.WriteFieldEnd();
	}
	if (__isset.lastFailedCharge)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"lastFailedCharge");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(10);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->lastFailedCharge);
		oprot.WriteFieldEnd();
	}
	if (__isset.lastFailedChargeReason)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"lastFailedChargeReason");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(11);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->lastFailedChargeReason);
		oprot.WriteFieldEnd();
	}
	if (__isset.nextPaymentDue)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"nextPaymentDue");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(12);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->nextPaymentDue);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumLockUntil)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumLockUntil");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(13);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->premiumLockUntil);
		oprot.WriteFieldEnd();
	}
	if (__isset.updated)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"updated");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(14);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->updated);
		oprot.WriteFieldEnd();
	}
	if (__isset.premiumSubscriptionNumber)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"premiumSubscriptionNumber");
		field.SetType(Thrift::Protocol::TypeString);
		field.SetID(16);
		oprot.WriteFieldBegin(field);
		oprot.WriteString(this->premiumSubscriptionNumber);
		oprot.WriteFieldEnd();
	}
	if (__isset.lastRequestedCharge)
	{
		Thrift::Protocol::TField field;
		field.SetName(L"lastRequestedCharge");
		field.SetType(Thrift::Protocol::TypeI64);
		field.SetID(17);
		oprot.WriteFieldBegin(field);
		oprot.WriteI64(this->lastRequestedCharge);
		oprot.WriteFieldEnd();
	}
	oprot.WriteFieldStop();
	oprot.WriteStructEnd();
}

